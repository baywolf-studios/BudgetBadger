name: test

on: [push]

jobs:
  verify_android:
    runs-on: macos-latest

    env:
      ANDROID_KEYSTORE_PASSWORD: ${{ secrets.ANDROID_KEYSTORE_PASSWORD }}

    steps:
      - name: Setup .NET 6.0.x
        uses: actions/setup-dotnet@v2
        with:
          dotnet-version: '6.0.x'

      - name: Print environment
        run: |
             nuget help | grep Version
             msbuild -version
             dotnet --info
             echo "GitHub ref: $GITHUB_REF"
             echo "GitHub event: $GITHUB_EVENT"

      - name: Checkout
        uses: actions/checkout@v3

      - name: Decrypt Secrets
        env:
          DECRYPT_FILE_PASSWORD: ${{ secrets.DECRYPT_FILE_PASSWORD }}
        run:  |
              gpg --batch --yes --decrypt --passphrase="$DECRYPT_FILE_PASSWORD" --output ./src/BudgetBadger.Forms/AppSecrets.cs ./.github/secrets/AppSecrets.cs.gpg
              gpg --batch --yes --decrypt --passphrase="$DECRYPT_FILE_PASSWORD" --output ./upload_certificate.pem ./.github/secrets/android-play/upload_certificate.pem.gpg
              gpg --batch --yes --decrypt --passphrase="$DECRYPT_FILE_PASSWORD" --output ./src/BudgetBadger.Android/upload_keystore.jks ./.github/secrets/android-play/upload_keystore.jks.gpg

      - name: Remove UWP project for Restore
        run: dotnet sln ./BudgetBadger.sln remove ./src/BudgetBadger.UWP/BudgetBadger.UWP.csproj

      - name: Restore
        run: nuget restore

      - name: Build and Sign for Play Store aab
        run: msbuild ./src/BudgetBadger.Android/BudgetBadger.Android.csproj /p:Configuration=Release /t:SignAndroidPackage /p:AndroidKeyStore=true /p:AndroidSigningKeyAlias="upload" /p:AndroidSigningKeyPass="$ANDROID_KEYSTORE_PASSWORD" /p:AndroidSigningKeyStore="upload_keystore.jks" /p:AndroidSigningStorePass="$ANDROID_KEYSTORE_PASSWORD" /p:AndroidPackageFormat="aab"

      - name: Build and Sign for Play Store apk
        run: msbuild ./src/BudgetBadger.Android/BudgetBadger.Android.csproj /p:Configuration=Release /t:SignAndroidPackage /p:AndroidKeyStore=true /p:AndroidSigningKeyAlias="upload" /p:AndroidSigningKeyPass="$ANDROID_KEYSTORE_PASSWORD" /p:AndroidSigningKeyStore="upload_keystore.jks" /p:AndroidSigningStorePass="$ANDROID_KEYSTORE_PASSWORD" /p:AndroidPackageFormat="apk"
        
  verify_ios:
    runs-on: macos-latest

    steps:
      - name: Setup .NET 6.0.x
        uses: actions/setup-dotnet@v2
        with:
          dotnet-version: '6.0.x'

      - name: Print environment
        run: |
             nuget help | grep Version
             msbuild -version
             dotnet --info
             echo "GitHub ref: $GITHUB_REF"
             echo "GitHub event: $GITHUB_EVENT"

      - name: Checkout
        uses: actions/checkout@v3

      - name: Decrypt Secrets
        env:
          DECRYPT_FILE_PASSWORD: ${{ secrets.DECRYPT_FILE_PASSWORD }}
        run:  |
              gpg --batch --yes --decrypt --passphrase="$DECRYPT_FILE_PASSWORD" --output ./src/BudgetBadger.Forms/AppSecrets.cs ./.github/secrets/AppSecrets.cs.gpg
              gpg --batch --yes --decrypt --passphrase="$DECRYPT_FILE_PASSWORD" --output ./ios_distribution.p12 ./.github/secrets/ios/ios_distribution.p12.gpg
              gpg --batch --yes --decrypt --passphrase="$DECRYPT_FILE_PASSWORD" --output ./Budget_Badger_AppStore.mobileprovision ./.github/secrets/ios/Budget_Badger_AppStore.mobileprovision.gpg

      - name: Set up Keychain
        env:
          KEYCHAIN_PASSWORD: ${{ secrets.BUILD_KEYCHAIN_PASSWORD }}
          DIST_CERT_PASSWORD: ${{ secrets.IOS_DIST_CERT_PASSWORD }}
        run: |
             security create-keychain -p "$KEYCHAIN_PASSWORD" "app-signing.keychain-db"
             security set-keychain-settings -lut 21600 "app-signing.keychain-db"
             security default-keychain -s "app-signing.keychain-db"
             security unlock-keychain -p "$KEYCHAIN_PASSWORD" "app-signing.keychain-db"
             security import "./ios_distribution.p12" -P "$DIST_CERT_PASSWORD" -A -t cert -f pkcs12 -k "app-signing.keychain-db"
             security list-keychain -d user -s "app-signing.keychain-db"
             security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$KEYCHAIN_PASSWORD" "app-signing.keychain-db"

      - name: Set up provisioning profiles
        run: |
             mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
             cp ./Budget_Badger_AppStore.mobileprovision ~/Library/MobileDevice/Provisioning\ Profiles

      - name: Remove UWP project for Restore
        run: dotnet sln ./BudgetBadger.sln remove ./src/BudgetBadger.UWP/BudgetBadger.UWP.csproj

      - name: Restore
        run: nuget restore

      - name: Build
        run: msbuild ./src/BudgetBadger.iOS/BudgetBadger.iOS.csproj /t:Build /p:Platform=iPhone /p:Configuration=Release /p:BuildIpa=true
        
  verify_macos:
    runs-on: macos-latest

    env:
      VERSION: ${{ needs.create_version_tag.outputs.version }}
      BUILDNUMBER: ${{ needs.create_version_tag.outputs.buildnumber }}

    steps:
      - name: Setup .NET 6.0.x
        uses: actions/setup-dotnet@v2
        with:
          dotnet-version: '6.0.x'

      - name: Print environment
        run: |
             nuget help | grep Version
             msbuild -version
             dotnet --info
             echo "GitHub ref: $GITHUB_REF"
             echo "GitHub event: $GITHUB_EVENT"

      - name: Checkout
        uses: actions/checkout@v3

      - name: Decrypt Secrets
        env:
          DECRYPT_FILE_PASSWORD: ${{ secrets.DECRYPT_FILE_PASSWORD }}
        run:  |
              gpg --batch --yes --decrypt --passphrase="$DECRYPT_FILE_PASSWORD" --output ./src/BudgetBadger.Forms/AppSecrets.cs ./.github/secrets/AppSecrets.cs.gpg
              gpg --batch --yes --decrypt --passphrase="$DECRYPT_FILE_PASSWORD" --output ./mac_app.p12 ./.github/secrets/macos/mac_app.p12.gpg
              gpg --batch --yes --decrypt --passphrase="$DECRYPT_FILE_PASSWORD" --output ./mac_installer.p12 ./.github/secrets/macos/mac_installer.p12.gpg

      - name: Set up Keychain
        env:
          KEYCHAIN_PASSWORD: ${{ secrets.BUILD_KEYCHAIN_PASSWORD }}
          DIST_CERT_PASSWORD: ${{ secrets.MACOS_DIST_CERT_PASSWORD }}
        run: |
             security create-keychain -p "$KEYCHAIN_PASSWORD" "app-signing.keychain-db"
             security set-keychain-settings -lut 21600 "app-signing.keychain-db"
             security default-keychain -s "app-signing.keychain-db"
             security unlock-keychain -p "$KEYCHAIN_PASSWORD" "app-signing.keychain-db"
             security import "./mac_app.p12" -P "$DIST_CERT_PASSWORD" -A -t cert -f pkcs12 -k "app-signing.keychain-db"
             security import "./mac_installer.p12" -P "$DIST_CERT_PASSWORD" -A -t cert -f pkcs12 -k "app-signing.keychain-db"
             security list-keychain -d user -s "app-signing.keychain-db"
             security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$KEYCHAIN_PASSWORD" "app-signing.keychain-db"

      - name: Remove UWP project for Restore
        run: dotnet sln ./BudgetBadger.sln remove ./src/BudgetBadger.UWP/BudgetBadger.UWP.csproj

      - name: Restore
        run: nuget restore

      - name: Build
        run: msbuild ./src/BudgetBadger.macOS/BudgetBadger.macOS.csproj /p:Configuration=Release /p:Platform=AnyCPU

  verify_uwp:
    runs-on: windows-latest

    env:
      VERSION: ${{ needs.create_version_tag.outputs.version }}
      BUILDNUMBER: ${{ needs.create_version_tag.outputs.buildnumber }}

    steps:
      - name: Setup MSBuild
        uses: microsoft/setup-msbuild@v1.1

      - name: Setup .NET 6.0.x
        uses: actions/setup-dotnet@v2
        with:
          dotnet-version: '6.0.x'

      - name: Print environment
        run: |
             nuget help | grep Version
             msbuild -version
             dotnet --info
             echo "GitHub ref: $GITHUB_REF"
             echo "GitHub event: $GITHUB_EVENT"

      - name: Checkout
        uses: actions/checkout@v3

      - name: Decrypt Secrets
        env:
          DECRYPT_FILE_PASSWORD: ${{ secrets.DECRYPT_FILE_PASSWORD }}
        run:  |
              gpg --batch --yes --decrypt --passphrase="$DECRYPT_FILE_PASSWORD" --output ./src/BudgetBadger.Forms/AppSecrets.cs ./.github/secrets/AppSecrets.cs.gpg
              gpg --batch --yes --decrypt --passphrase="$DECRYPT_FILE_PASSWORD" --output ./BudgetBadger.UWP_StoreKey.pfx ./.github/secrets/uwp/BudgetBadger.UWP_StoreKey.pfx.gpg
        shell: bash

      - name: Update Version Info
        run: |
             [xml]$manifest = get-content "./src/BudgetBadger.UWP/Package.appxmanifest"
             $manifest.Package.Identity.Version = "$VERSION" + "." + "$BUILDNUMBER" 
             $manifest.save("./src/BudgetBadger.UWP/Package.appxmanifest")
        shell: pwsh

      - name: Restore
        run: nuget restore

      - name: Build
        env:
          UWP_CERT_PASSWORD: ${{ secrets.UWP_CERT_PASSWORD }}
        run: |
             msbuild ./src/BudgetBadger.UWP/BudgetBadger.UWP.csproj /p:AppxBundlePlatforms="x86|x64|ARM|ARM64" /p:AppxBundle=Always /p:UapAppxPackageBuildMode=StoreUpload /p:AppxPackageSigningEnabled=true /p:PackageCertificateThumbprint="" /p:PackageCertificateKeyFile="./BudgetBadger.UWP_StoreKey.pfx" /p:PackageCertificatePassword="$UWP_CERT_PASSWORD" /restore
        shell: pwsh

 
  unit_tests:
    runs-on: ubuntu-latest
    steps:
      - name: Setup .NET 6.0.x
        uses: actions/setup-dotnet@v2
        with:
          dotnet-version: '6.0.x'

      - name: Print environment
        run: |
             nuget help | grep Version
             msbuild -version
             dotnet --info
             echo "GitHub ref: $GITHUB_REF"
             echo "GitHub event: $GITHUB_EVENT"

      - name: Checkout
        uses: actions/checkout@v3

      - name: Restore
        run: dotnet restore ./tests/BudgetBadger.UnitTests/BudgetBadger.UnitTests.csproj

      - name: Build
        run: dotnet build ./tests/BudgetBadger.UnitTests/BudgetBadger.UnitTests.csproj

      - name: Test
        run: dotnet test ./tests/BudgetBadger.UnitTests/BudgetBadger.UnitTests.csproj --verbosity normal
