<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Prism.Forms</name>
    </assembly>
    <members>
        <member name="T:Prism.AppModel.RuntimePlatform">
            <summary>
            Represents the Platform (OS) that the application is running on.
            </summary>
            <remarks>This enum acts as a wrapper around the Device.RuntimePlatform string-based options</remarks>
        </member>
        <member name="T:Prism.Behaviors.BehaviorBase`1">
            <summary>
            Base class that extends on Xamarin Forms Behaviors.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Prism.Behaviors.BehaviorBase`1.AssociatedObject">
            <summary>
            The Object associated with the Behavior
            </summary>
        </member>
        <member name="M:Prism.Behaviors.BehaviorBase`1.OnAttachedTo(`0)">
            <inheritDoc />
        </member>
        <member name="M:Prism.Behaviors.BehaviorBase`1.OnDetachingFrom(`0)">
            <inheritDoc />
        </member>
        <member name="M:Prism.Behaviors.BehaviorBase`1.OnBindingContextChanged">
            <inheritDoc />
        </member>
        <member name="T:Prism.Behaviors.EventToCommandBehavior">
            <summary>
            Behavior class that enable using <see cref="T:System.Windows.Input.ICommand" /> to react on events raised by <see cref="T:Xamarin.Forms.BindableObject" /> bindable.
            </summary>
            <para>
            There are multiple ways to pass a parameter to the <see cref="M:System.Windows.Input.ICommand.Execute(System.Object)"/> method. 
            Setting the <see cref="P:Prism.Behaviors.EventToCommandBehavior.CommandParameter"/> will always result in that value will be sent.
            The <see cref="P:Prism.Behaviors.EventToCommandBehavior.EventArgsParameterPath"/> will walk the property path on the instance of <see cref="T:System.EventArgs"/> for the event and, if any property found, pass that parameter.
            The <see cref="P:Prism.Behaviors.EventToCommandBehavior.EventArgsConverter"/> will call the <see cref="M:Xamarin.Forms.IValueConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)"/> method with the <see cref="P:Prism.Behaviors.EventToCommandBehavior.EventArgsConverterParameter"/> and pass the result as parameter.
            </para>
            <para>
            The order of evaluation for the parameter to be sent to the <see cref="M:System.Windows.Input.ICommand.Execute(System.Object)"/> method is
            1. <see cref="P:Prism.Behaviors.EventToCommandBehavior.CommandParameter"/>
            2. <see cref="P:Prism.Behaviors.EventToCommandBehavior.EventArgsParameterPath"/>
            3. <see cref="P:Prism.Behaviors.EventToCommandBehavior.EventArgsConverter"/>
            and as soon as a non-<c>null</c> value is found, the evaluation is stopped.
            </para>
            <example>
            &lt;ListView&gt;
            &lt;ListView.Behaviors&gt;
            &lt;behaviors:EventToCommandBehavior EventName="ItemTapped" Command={Binding ItemTappedCommand} /&gt;
            &lt;/ListView.Behaviors&gt;
            &lt;/ListView&gt;
            </example>
        </member>
        <member name="P:Prism.Behaviors.EventToCommandBehavior.EventArgsParameterPath">
            <summary>
            Parameter path to extract property from <see cref="T:System.EventArgs"/> instance to pass to <see cref="M:System.Windows.Input.ICommand.Execute(System.Object)"/>
            </summary>
        </member>
        <member name="P:Prism.Behaviors.EventToCommandBehavior.EventName">
            <summary>
            Name of the event that will be forwared to <see cref="P:Prism.Behaviors.EventToCommandBehavior.Command" />
            </summary>
            <remarks>
            An event that is invalid for the attached <see cref="T:Xamarin.Forms.View" /> will result in <see cref="T:System.ArgumentException" /> thrown.
            </remarks>
        </member>
        <member name="P:Prism.Behaviors.EventToCommandBehavior.Command">
            <summary>
            The command to execute
            </summary>
        </member>
        <member name="P:Prism.Behaviors.EventToCommandBehavior.CommandParameter">
            <summary>
            Argument sent to <see cref="M:System.Windows.Input.ICommand.Execute(System.Object)" />
            </summary>
            <para>
            If <see cref="P:Prism.Behaviors.EventToCommandBehavior.EventArgsConverter" /> and <see cref="P:Prism.Behaviors.EventToCommandBehavior.EventArgsConverterParameter" /> is set then the result of the
            conversion
            will be sent.
            </para>
        </member>
        <member name="P:Prism.Behaviors.EventToCommandBehavior.EventArgsConverter">
            <summary>
            Instance of <see cref="T:Xamarin.Forms.IValueConverter" /> to convert the <see cref="T:System.EventArgs" /> for <see cref="P:Prism.Behaviors.EventToCommandBehavior.EventName" />
            </summary>
        </member>
        <member name="P:Prism.Behaviors.EventToCommandBehavior.EventArgsConverterParameter">
            <summary>
            Argument passed as parameter to <see cref="M:Xamarin.Forms.IValueConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)" />
            </summary>
        </member>
        <member name="T:Prism.Behaviors.IPageBehaviorFactory">
            <summary>
            Applies behaviors to the Xamarin.Forms pages when they are created during navigation.
            </summary>
        </member>
        <member name="M:Prism.Behaviors.IPageBehaviorFactory.ApplyPageBehaviors(Xamarin.Forms.Page)">
            <summary>
            Applies behaviors to a page based on the page type.
            </summary>
            <param name="page">The page to apply the behaviors</param>
            <remarks>The PageLifeCycleAwareBehavior is applied to all pages</remarks>
        </member>
        <member name="M:Prism.Behaviors.IPageBehaviorFactory.ApplyCarouselPageBehaviors(Xamarin.Forms.CarouselPage)">
            <summary>
            Applies behaviors to a CarouselPage.
            </summary>
            <param name="page">The CarouselPage to apply the behaviors</param>
            <remarks>The CarouselPageActiveAwareBehavior is applied by default</remarks>
        </member>
        <member name="M:Prism.Behaviors.IPageBehaviorFactory.ApplyContentPageBehaviors(Xamarin.Forms.ContentPage)">
            <summary>
            Applies behaviors to a ContentPage.
            </summary>
            <param name="page">The ContentPage to apply the behaviors</param>
        </member>
        <member name="M:Prism.Behaviors.IPageBehaviorFactory.ApplyMasterDetailPageBehaviors(Xamarin.Forms.MasterDetailPage)">
            <summary>
            Applies behaviors to a MasterDetailPage.
            </summary>
            <param name="page">The MasterDetailPage to apply the behaviors</param>
        </member>
        <member name="M:Prism.Behaviors.IPageBehaviorFactory.ApplyNavigationPageBehaviors(Xamarin.Forms.NavigationPage)">
            <summary>
            Applies behaviors to a NavigationPage.
            </summary>
            <param name="page">The NavigationPage to apply the behaviors</param>
            <remarks>The NavigationPageSystemGoBackBehavior and NavigationPageActiveAwareBehavior are applied by default</remarks>
        </member>
        <member name="M:Prism.Behaviors.IPageBehaviorFactory.ApplyTabbedPageBehaviors(Xamarin.Forms.TabbedPage)">
            <summary>
            Applies behaviors to a TabbedPage.
            </summary>
            <param name="page">The TabbedPage to apply the behaviors</param>
            <remarks>The TabbedPageActiveAwareBehavior is added by default</remarks>
        </member>
        <member name="M:Prism.Behaviors.MultiPageActiveAwareBehavior`1.OnAttachedTo(Xamarin.Forms.MultiPage{`0})">
            <inheritDoc/>
        </member>
        <member name="M:Prism.Behaviors.MultiPageActiveAwareBehavior`1.OnDetachingFrom(Xamarin.Forms.MultiPage{`0})">
            <inheritDoc/>
        </member>
        <member name="M:Prism.Behaviors.MultiPageActiveAwareBehavior`1.CurrentPageChangedHandler(System.Object,System.EventArgs)">
            <summary>
            Event Handler for the MultiPage CurrentPageChanged event
            </summary>
            <param name="sender">The MultiPage</param>
            <param name="e">Event Args</param>
        </member>
        <member name="M:Prism.Behaviors.MultiPageActiveAwareBehavior`1.RootPageAppearingHandler(System.Object,System.EventArgs)">
            <summary>
            Event Handler for the MultiPage Appearing event
            </summary>
            <param name="sender">The MultiPage Appearing</param>
            <param name="e">Event Args</param>
        </member>
        <member name="M:Prism.Behaviors.MultiPageActiveAwareBehavior`1.RootPageDisappearingHandler(System.Object,System.EventArgs)">
            <summary>
            Event Handler for the MultiPage Disappearing event
            </summary>
            <param name="sender">The MultiPage Disappearing</param>
            <param name="e">Event Args</param>
        </member>
        <member name="T:Prism.Behaviors.PageBehaviorFactory">
            <summary>
            Applies behaviors to the Xamarin.Forms pages when they are created during navigation.
            </summary>
        </member>
        <member name="M:Prism.Behaviors.PageBehaviorFactory.ApplyCarouselPageBehaviors(Xamarin.Forms.CarouselPage)">
            <summary>
            Applies behaviors to a CarouselPage.
            </summary>
            <param name="page">The CarouselPage to apply the behaviors</param>
            <remarks>The CarouselPageActiveAwareBehavior is applied by default</remarks>
        </member>
        <member name="M:Prism.Behaviors.PageBehaviorFactory.ApplyContentPageBehaviors(Xamarin.Forms.ContentPage)">
            <summary>
            Applies behaviors to a ContentPage.
            </summary>
            <param name="page">The ContentPage to apply the behaviors</param>
        </member>
        <member name="M:Prism.Behaviors.PageBehaviorFactory.ApplyMasterDetailPageBehaviors(Xamarin.Forms.MasterDetailPage)">
            <summary>
            Applies behaviors to a MasterDetailPage.
            </summary>
            <param name="page">The MasterDetailPage to apply the behaviors</param>
        </member>
        <member name="M:Prism.Behaviors.PageBehaviorFactory.ApplyNavigationPageBehaviors(Xamarin.Forms.NavigationPage)">
            <summary>
            Applies behaviors to a NavigationPage.
            </summary>
            <param name="page">The NavigationPage to apply the behaviors</param>
            <remarks>The NavigationPageSystemGoBackBehavior and NavigationPageActiveAwareBehavior are applied by default</remarks>
        </member>
        <member name="M:Prism.Behaviors.PageBehaviorFactory.ApplyPageBehaviors(Xamarin.Forms.Page)">
            <summary>
            Applies behaviors to a page based on the page type.
            </summary>
            <param name="page">The page to apply the behaviors</param>
            <remarks>The PageLifeCycleAwareBehavior is applied to all pages</remarks>
        </member>
        <member name="M:Prism.Behaviors.PageBehaviorFactory.ApplyTabbedPageBehaviors(Xamarin.Forms.TabbedPage)">
            <summary>
            Applies behaviors to a TabbedPage.
            </summary>
            <param name="page">The TabbedPage to apply the behaviors</param>
            <remarks>The TabbedPageActiveAwareBehavior is added by default</remarks>
        </member>
        <member name="T:Prism.Common.IPageAware">
            <summary>
            Interface to signify that a class must have knowledge of a specific <see cref="T:Xamarin.Forms.Page"/> instance in order to function properly.
            </summary>
        </member>
        <member name="P:Prism.Common.IPageAware.Page">
            <summary>
            The <see cref="T:Xamarin.Forms.Page"/> instance.
            </summary>
        </member>
        <member name="T:Prism.Common.UriParsingHelper">
            <summary>
            Helper class for parsing <see cref="T:System.Uri"/> instances.
            </summary>
        </member>
        <member name="M:Prism.Ioc.IContainerRegistryExtensions.RegisterForNavigation``1(Prism.Ioc.IContainerRegistry,System.String)">
            <summary>
            Registers a Page for navigation.
            </summary>
            <typeparam name="TView">The Type of Page to register</typeparam>
            <param name="containerRegistry"><see cref="T:Prism.Ioc.IContainerRegistry"/> used to register type for Navigation.</param>
            <param name="name">The unique name to register with the Page</param>
        </member>
        <member name="M:Prism.Ioc.IContainerRegistryExtensions.RegisterForNavigation(Prism.Ioc.IContainerRegistry,System.Type,System.String)">
            <summary>
            Registers a Page for navigation
            </summary>
            <param name="containerRegistry"><see cref="T:Prism.Ioc.IContainerRegistry"/> used to register type for Navigation.</param>
            <param name="viewType">The type of Page to register</param>
            <param name="name">The unique name to register with the Page</param>
        </member>
        <member name="M:Prism.Ioc.IContainerRegistryExtensions.RegisterForNavigation``2(Prism.Ioc.IContainerRegistry,System.String)">
            <summary>
            Registers a Page for navigation.
            </summary>
            <typeparam name="TView">The Type of Page to register</typeparam>
            <typeparam name="TViewModel">The ViewModel to use as the BindingContext for the Page</typeparam>
            <param name="name">The unique name to register with the Page</param>
            <param name="containerRegistry"></param>
        </member>
        <member name="M:Prism.Ioc.IContainerRegistryExtensions.RegisterForNavigationOnPlatform``2(Prism.Ioc.IContainerRegistry,System.String,System.Type,System.Type,System.Type,System.Type,System.Type)">
            <summary>
            Registers a Page for navigation based on the current Device OS using a shared ViewModel
            </summary>
            <typeparam name="TView">Default View Type to be shared across multiple Device Operating Systems if they are not specified directly.</typeparam>
            <typeparam name="TViewModel">Shared ViewModel Type</typeparam>
            <param name="containerRegistry"><see cref="T:Prism.Ioc.IContainerRegistry"/> used to register type for Navigation.</param>
            <param name="name">The unique name to register with the Page. If left empty or null will default to the ViewModel root name. i.e. MyPageViewModel => MyPage</param>
            <param name="androidView">Android Specific View Type</param>
            <param name="iOSView">iOS Specific View Type</param>
            <param name="otherView">Other Platform Specific View Type</param>
            <param name="windowsView">Windows Specific View Type</param>
            <param name="winPhoneView">Windows Phone Specific View Type</param>
        </member>
        <member name="M:Prism.Ioc.IContainerRegistryExtensions.RegisterForNavigationOnPlatform``2(Prism.Ioc.IContainerRegistry,Prism.IPlatform[])">
            <summary>
            Registers a Page for navigation based on the current Device OS using a shared ViewModel
            </summary>
            <typeparam name="TView">Default View Type to be shared across multiple Device Operating Systems if they are not specified directly.</typeparam>
            <typeparam name="TViewModel">Shared ViewModel Type</typeparam>
            <param name="containerRegistry"><see cref="T:Prism.Ioc.IContainerRegistry"/> used to register type for Navigation.</param>
            <param name="platforms"></param>
        </member>
        <member name="M:Prism.Ioc.IContainerRegistryExtensions.RegisterForNavigationOnPlatform``2(Prism.Ioc.IContainerRegistry,System.String,Prism.IPlatform[])">
            <summary>
            Registers a Page for navigation based on the current Device OS using a shared ViewModel
            </summary>
            <typeparam name="TView">Default View Type to be shared across multiple Device Operating Systems if they are not specified directly.</typeparam>
            <typeparam name="TViewModel">Shared ViewModel Type</typeparam>
            <param name="containerRegistry"><see cref="T:Prism.Ioc.IContainerRegistry"/> used to register type for Navigation.</param>
            <param name="name">The unique name to register with the Page. If left empty or null will default to the View name.</param>
            <param name="platforms"></param>
        </member>
        <member name="M:Prism.Ioc.IContainerRegistryExtensions.RegisterForNavigationOnIdiom``2(Prism.Ioc.IContainerRegistry,System.String,System.Type,System.Type,System.Type)">
            <summary>
            Registers a Page for navigation based on the Device Idiom using a shared ViewModel
            </summary>
            <typeparam name="TView">Default View Type to be used across multiple Idioms if they are not specified directly.</typeparam>
            <typeparam name="TViewModel">The shared ViewModel</typeparam>
            <param name="containerRegistry"><see cref="T:Prism.Ioc.IContainerRegistry"/> used to register type for Navigation.</param>
            <param name="name">The common name used for Navigation. If left empty or null will default to the ViewModel root name. i.e. MyPageViewModel => MyPage</param>
            <param name="desktopView">Desktop Specific View Type</param>
            <param name="tabletView">Tablet Specific View Type</param>
            <param name="phoneView">Phone Specific View Type</param>
        </member>
        <member name="T:Prism.Modularity.IModule">
            <summary>
            Defines the contract for the modules deployed in the application.
            </summary>
        </member>
        <member name="M:Prism.Modularity.IModule.RegisterTypes(Prism.Ioc.IContainerRegistry)">
            <summary>
            Used to register types with the container that will be used by your application.
            </summary>
        </member>
        <member name="M:Prism.Modularity.IModule.OnInitialized(Prism.Ioc.IContainerProvider)">
            <summary>
            Notifies the module that it has be initialized.
            </summary>
        </member>
        <member name="T:Prism.Modularity.IModuleCatalog">
            <summary>
            This is the expected catalog definition for the ModuleManager. 
            The ModuleCatalog holds information about the modules that can be used by the 
            application. Each module is described in a ModuleInfo class, that records the 
            name and type of the module. 
            </summary>
        </member>
        <member name="P:Prism.Modularity.IModuleCatalog.Modules">
            <summary>
            Gets all the <see cref="T:Prism.Modularity.ModuleInfo"/> classes that are in the <see cref="T:Prism.Modularity.ModuleCatalog"/>.
            </summary>
        </member>
        <member name="M:Prism.Modularity.IModuleCatalog.AddModule(Prism.Modularity.ModuleInfo)">
            <summary>
            Adds a <see cref="T:Prism.Modularity.ModuleInfo"/> to the <see cref="T:Prism.Modularity.ModuleCatalog"/>.
            </summary>
            <param name="moduleInfo">The <see cref="T:Prism.Modularity.ModuleInfo"/> to add.</param>
            <returns>The <see cref="T:Prism.Modularity.ModuleCatalog"/> for easily adding multiple modules.</returns>
        </member>
        <member name="T:Prism.Modularity.IModuleCatalogExtensions">
            <summary>
            <see cref="T:Prism.Modularity.IModuleCatalog"/>  extensions.
            </summary>
        </member>
        <member name="M:Prism.Modularity.IModuleCatalogExtensions.AddModule``1(Prism.Modularity.IModuleCatalog,Prism.Modularity.InitializationMode)">
            <summary>
            Adds the module.
            </summary>
            <returns>The module.</returns>
            <param name="catalog">Catalog</param>
            <param name="mode"><see cref="T:Prism.Modularity.InitializationMode"/></param>
            <typeparam name="T">The <see cref="T:Prism.Modularity.IModule"/> type parameter.</typeparam>
        </member>
        <member name="M:Prism.Modularity.IModuleCatalogExtensions.AddModule``1(Prism.Modularity.IModuleCatalog,System.String,Prism.Modularity.InitializationMode)">
            <summary>
            Adds the module.
            </summary>
            <returns>The module.</returns>
            <param name="catalog">Catalog.</param>
            <param name="name">Name.</param>
            <param name="mode"><see cref="T:Prism.Modularity.IModule"/>.</param>
            <typeparam name="T">The <see cref="T:Prism.Modularity.IModule"/> type parameter.</typeparam>
        </member>
        <member name="M:Prism.Modularity.IModuleCatalogExtensions.Exists``1(Prism.Modularity.IModuleCatalog)">
            <summary>
            Checks to see if the <see cref="T:Prism.Modularity.IModule"/> exists in the <see cref="P:Prism.Modularity.IModuleCatalog.Modules"/>  
            </summary>
            <returns><c>true</c> if the Module exists.</returns>
            <param name="catalog">Catalog.</param>
            <typeparam name="T">The <see cref="T:Prism.Modularity.IModule"/> to check for.</typeparam>
        </member>
        <member name="M:Prism.Modularity.IModuleCatalogExtensions.Exists(Prism.Modularity.IModuleCatalog,System.String)">
            <summary>
            Exists the specified catalog and name.
            </summary>
            <returns><c>true</c> if the Module exists.</returns>
            <param name="catalog">Catalog.</param>
            <param name="name">Name.</param>
        </member>
        <member name="M:Prism.Modularity.IModuleCatalogExtensions.IsInitialized``1(Prism.Modularity.IModuleCatalog)">
            <summary>
            Checks to see if the <see cref="T:Prism.Modularity.IModule"/> is already initialized. 
            </summary>
            <returns><c>true</c>, if initialized, <c>false</c> otherwise.</returns>
            <param name="catalog">Catalog.</param>
            <typeparam name="T">The <see cref="T:Prism.Modularity.IModule"/> to check.</typeparam>
        </member>
        <member name="M:Prism.Modularity.IModuleCatalogExtensions.IsInitialized(Prism.Modularity.IModuleCatalog,System.String)">
            <summary>
            Checks to see if the <see cref="T:Prism.Modularity.IModule"/> is already initialized. 
            </summary>
            <returns><c>true</c>, if initialized, <c>false</c> otherwise.</returns>
            <param name="catalog">Catalog.</param>
            <param name="name">Name.</param>
        </member>
        <member name="T:Prism.Modularity.IModuleInitializer">
            <summary>
            Declares a service which initializes the modules into the application.
            </summary>
        </member>
        <member name="M:Prism.Modularity.IModuleInitializer.Initialize(Prism.Modularity.ModuleInfo)">
            <summary>
            Initializes the specified module.
            </summary>
            <param name="moduleInfo">The module to initialize</param>
        </member>
        <member name="T:Prism.Modularity.IModuleManager">
            <summary>
            Defines the interface for the service that will retrieve and initialize the application's modules.
            </summary>
        </member>
        <member name="M:Prism.Modularity.IModuleManager.LoadModule(System.String)">
            <summary>
            Loads and initializes the module on the <see cref="T:Prism.Modularity.ModuleCatalog"/> with the name <paramref name="moduleName"/>.
            </summary>
            <param name="moduleName">Name of the module requested for initialization.</param>
        </member>
        <member name="M:Prism.Modularity.IModuleManager.Run">
            <summary>
            Initializes the modules in the <see cref="T:Prism.Modularity.ModuleCatalog"/>.
            </summary>
        </member>
        <member name="T:Prism.Modularity.InitializationMode">
            <summary>
            Specifies on which stage the Module group will be initialized.
            </summary>
        </member>
        <member name="F:Prism.Modularity.InitializationMode.WhenAvailable">
            <summary>
            The module will be initialized when it is available on application start-up.
            </summary>
        </member>
        <member name="F:Prism.Modularity.InitializationMode.OnDemand">
            <summary>
            The module will be initialized when requested, and not automatically on application start-up.
            </summary>
        </member>
        <member name="T:Prism.Modularity.ModuleCatalog">
            <summary>
            The <see cref="T:Prism.Modularity.ModuleCatalog"/> holds information about the modules that can be used by the 
            application. Each module is described in a <see cref="T:Prism.Modularity.ModuleInfo"/> class, that records the 
            name and type of the module. 
            </summary>
        </member>
        <member name="P:Prism.Modularity.ModuleCatalog.Modules">
            <summary>
            Gets all the <see cref="T:Prism.Modularity.ModuleInfo"/> classes that are in the <see cref="T:Prism.Modularity.ModuleCatalog"/>.
            </summary>
        </member>
        <member name="M:Prism.Modularity.ModuleCatalog.AddModule(Prism.Modularity.ModuleInfo)">
            <summary>
            Adds a <see cref="T:Prism.Modularity.ModuleInfo"/> to the <see cref="T:Prism.Modularity.ModuleCatalog"/>.
            </summary>
            <param name="moduleInfo">The <see cref="T:Prism.Modularity.ModuleInfo"/> to add.</param>
            <returns>The <see cref="T:Prism.Modularity.ModuleCatalog"/> for easily adding multiple modules.</returns>
        </member>
        <member name="P:Prism.Modularity.ModuleInfo.InitializationMode">
            <summary>
            Specifies on which stage the Module will be initialized.
            </summary>
        </member>
        <member name="P:Prism.Modularity.ModuleInfo.ModuleName">
            <summary>
            Gets or sets the name of the module.
            </summary>
            <value>The name of the module.</value>
        </member>
        <member name="P:Prism.Modularity.ModuleInfo.State">
            <summary>
            Gets or sets the state of the <see cref="T:Prism.Modularity.ModuleInfo"/> with regards to the module loading and initialization process.
            </summary>
        </member>
        <member name="P:Prism.Modularity.ModuleInfo.ModuleType">
            <summary>
            Gets or sets the module <see cref="T:System.Type"/>.
            </summary>
            <value>The type of the module.</value>
        </member>
        <member name="M:Prism.Modularity.ModuleInfo.#ctor(System.Type)">
            <summary>
            Initializes a new instance of <see cref="T:Prism.Modularity.ModuleInfo"/>.
            </summary>
            <param name="moduleType">The module's type.</param>
        </member>
        <member name="M:Prism.Modularity.ModuleInfo.#ctor(System.Type,System.String)">
            <summary>
            Initializes a new instance of <see cref="T:Prism.Modularity.ModuleInfo"/>.
            </summary>
            <param name="moduleType">The module's type.</param>
            <param name="moduleName">The module's name.</param>
        </member>
        <member name="M:Prism.Modularity.ModuleInfo.#ctor(System.Type,System.String,Prism.Modularity.InitializationMode)">
            <summary>
            Initializes a new instance of <see cref="T:Prism.Modularity.ModuleInfo"/>.
            </summary>
            <param name="moduleType">The module's type.</param>
            <param name="moduleName">The module's name.</param>
            <param name="initializationMode">The module's <see cref="P:Prism.Modularity.ModuleInfo.InitializationMode"/>.</param>
        </member>
        <member name="T:Prism.Modularity.ModuleManager">
            <summary>
            Component responsible for coordinating the modules' type loading and module initialization process. 
            </summary>
        </member>
        <member name="P:Prism.Modularity.ModuleManager.ModuleCatalog">
            <summary>
            The module catalog.
            </summary>
        </member>
        <member name="P:Prism.Modularity.ModuleManager.ModuleInitializer">
            <summary>
            The module initializer.
            </summary>
        </member>
        <member name="M:Prism.Modularity.ModuleManager.#ctor(Prism.Modularity.IModuleInitializer,Prism.Modularity.IModuleCatalog)">
            <summary>
            Initializes an instance of the <see cref="T:Prism.Modularity.ModuleManager"/> class.
            </summary>
            <param name="moduleInitializer">Service used for initialization of modules.</param>
            <param name="moduleCatalog">Catalog that enumerates the modules to be loaded and initialized.</param>
        </member>
        <member name="M:Prism.Modularity.ModuleManager.Run">
            <summary>
            Initializes the modules marked as <see cref="F:Prism.Modularity.InitializationMode.WhenAvailable"/> in the <see cref="P:Prism.Modularity.ModuleManager.ModuleCatalog"/>.
            </summary>
        </member>
        <member name="M:Prism.Modularity.ModuleManager.LoadModule(System.String)">
            <summary>
            Loads and initializes the module in the <see cref="P:Prism.Modularity.ModuleManager.ModuleCatalog"/> with the name <paramref name="moduleName"/>.
            </summary>
            <param name="moduleName">Name of the module requested for initialization.</param>
        </member>
        <member name="M:Prism.Modularity.ModuleManager.LoadModulesWhenAvailable">
            <summary>
            Loads the <see cref="T:Prism.Modularity.IModule"/>'s with <see cref="F:Prism.Modularity.InitializationMode.WhenAvailable"/>
            </summary>
        </member>
        <member name="M:Prism.Modularity.ModuleManager.LoadModules(System.Collections.Generic.IEnumerable{Prism.Modularity.ModuleInfo})">
            <summary>
            Loads the specified modules.
            </summary>
            <param name="moduleInfos"><see cref="T:Prism.Modularity.ModuleInfo"/>.</param>
        </member>
        <member name="T:Prism.Modularity.ModuleState">
            <summary>
            Defines the states a <see cref="T:Prism.Modularity.ModuleInfo"/> can be in, with regards to the module loading and initialization process. 
            </summary>
        </member>
        <member name="F:Prism.Modularity.ModuleState.NotStarted">
            <summary>
            Initial state for <see cref="T:Prism.Modularity.ModuleInfo"/>s. The <see cref="T:Prism.Modularity.ModuleInfo"/> is defined, 
            but it has not been loaded, retrieved or initialized yet. 
            </summary>
        </member>
        <member name="F:Prism.Modularity.ModuleState.Initializing">
            <summary>
            The module is currently Initializing, by the <see cref="T:Prism.Modularity.IModuleInitializer"/>
            </summary>
        </member>
        <member name="F:Prism.Modularity.ModuleState.Initialized">
            <summary>
            The module is initialized and ready to be used. 
            </summary>
        </member>
        <member name="T:Prism.Mvvm.ViewModelLocator">
            <summary>
            This class defines the attached property and related change handler that calls the <see cref="T:Prism.Mvvm.ViewModelLocationProvider"/>.
            </summary>
        </member>
        <member name="F:Prism.Mvvm.ViewModelLocator.AutowireViewModelProperty">
            <summary>
            Instructs Prism whether or not to automatically create an instance of a ViewModel using a convention, and assign the associated View's <see cref="P:Xamarin.Forms.BindableObject.BindingContext"/> to that instance.
            </summary>
        </member>
        <member name="M:Prism.Mvvm.ViewModelLocator.GetAutowireViewModel(Xamarin.Forms.BindableObject)">
            <summary>
            Gets the AutowireViewModel property value.
            </summary>
            <param name="bindable"></param>
            <returns></returns>
        </member>
        <member name="M:Prism.Mvvm.ViewModelLocator.SetAutowireViewModel(Xamarin.Forms.BindableObject,System.Nullable{System.Boolean})">
            <summary>
            Sets the AutowireViewModel property value.  If <c>true</c>, creates an instance of a ViewModel using a convention, and sets the associated View's <see cref="P:Xamarin.Forms.BindableObject.BindingContext"/> to that instance.
            </summary>
            <param name="bindable"></param>
            <param name="value"></param>
        </member>
        <member name="M:Prism.Mvvm.ViewModelLocator.Bind(System.Object,System.Object)">
            <summary>
            Sets the <see cref="P:Xamarin.Forms.BindableObject.BindingContext"/> of a View
            </summary>
            <param name="view">The View to set the <see cref="P:Xamarin.Forms.BindableObject.BindingContext"/> on</param>
            <param name="viewModel">The object to use as the <see cref="P:Xamarin.Forms.BindableObject.BindingContext"/> for the View</param>
        </member>
        <member name="T:Prism.Navigation.IConfirmNavigation">
            <summary>
            Provides a way for ViewModels involved in navigation to determine if a navigation request should continue.
            </summary>
        </member>
        <member name="M:Prism.Navigation.IConfirmNavigation.CanNavigate(Prism.Navigation.NavigationParameters)">
            <summary>
            Determines whether this instance accepts being navigated away from.
            </summary>
            <param name="parameters">The navigation parameters.</param>
            <returns><c>True</c> if navigation can continue, <c>False</c> if navigation is not allowed to continue</returns>
        </member>
        <member name="T:Prism.Navigation.IConfirmNavigationAsync">
            <summary>
            Provides a way for ViewModels involved in navigation to asynchronously determine if a navigation request should continue.
            </summary>
        </member>
        <member name="M:Prism.Navigation.IConfirmNavigationAsync.CanNavigateAsync(Prism.Navigation.NavigationParameters)">
            <summary>
            Determines whether this instance accepts being navigated away from.
            </summary>
            <param name="parameters">The navigation parameters.</param>
            <returns><c>True</c> if navigation can continue, <c>False</c> if navigation is not allowed to continue</returns>
        </member>
        <member name="T:Prism.Navigation.IMasterDetailPageOptions">
            <summary>
            Provides a way for the INavigationService to make decisions regarding a MasterDetailPage during navigation.
            </summary>
        </member>
        <member name="P:Prism.Navigation.IMasterDetailPageOptions.IsPresentedAfterNavigation">
            <summary>
            The INavigationService uses the result of this property to determine if the MasterDetailPage.Master should be presented after navigation.
            </summary>
        </member>
        <member name="T:Prism.Navigation.INavigatedAware">
            <summary>
            Provides a way for ViewModels involved in navigation to be notified of navigation activities after the target Page has been added to the navigation stack.
            </summary>
        </member>
        <member name="M:Prism.Navigation.INavigatedAware.OnNavigatedFrom(Prism.Navigation.NavigationParameters)">
            <summary>
            Called when the implementer has been navigated away from.
            </summary>
            <param name="parameters">The navigation parameters.</param>
        </member>
        <member name="M:Prism.Navigation.INavigatedAware.OnNavigatedTo(Prism.Navigation.NavigationParameters)">
            <summary>
            Called when the implementer has been navigated to.
            </summary>
            <param name="parameters">The navigation parameters.</param>
        </member>
        <member name="T:Prism.Navigation.INavigatingAware">
            <summary>
            Provides a way for ViewModels involved in navigation to be notified of navigation activities prior to the target Page being added to the navigation stack.
            </summary>
        </member>
        <member name="M:Prism.Navigation.INavigatingAware.OnNavigatingTo(Prism.Navigation.NavigationParameters)">
            <summary>
            Called before the implementor has been navigated to.
            </summary>
            <param name="parameters">The navigation parameters.</param>
            <remarks>Not called when using device hardware or software back buttons</remarks>
        </member>
        <member name="T:Prism.Navigation.INavigationAware">
            <summary>
            Provides a way for ViewModels involved in navigation to be notified of navigation activities.
            </summary>
        </member>
        <member name="T:Prism.Navigation.INavigationPageOptions">
            <summary>
            Provides a way for the INavigationService to make decisions regarding a NavigationPage during navigation.
            </summary>
        </member>
        <member name="P:Prism.Navigation.INavigationPageOptions.ClearNavigationStackOnNavigation">
            <summary>
            The INavigationService uses the result of this property to determine if the NavigationPage should clear the NavigationStack when navigating to a new Page.
            </summary>
            <remarks>This is equivalant to calling PopToRoot, and then replacing the current Page with the target Page being navigated to.</remarks>
        </member>
        <member name="T:Prism.Navigation.INavigationService">
            <summary>
            Provides page based navigation for ViewModels.
            </summary>
        </member>
        <member name="M:Prism.Navigation.INavigationService.GoBackAsync">
            <summary>
            Navigates to the most recent entry in the back navigation history by popping the calling Page off the navigation stack.
            </summary>
            <returns>If <c>true</c> a go back operation was successful. If <c>false</c> the go back operation failed.</returns>
        </member>
        <member name="M:Prism.Navigation.INavigationService.GoBackAsync(Prism.Navigation.NavigationParameters)">
            <summary>
            Navigates to the most recent entry in the back navigation history by popping the calling Page off the navigation stack.
            </summary>
            <param name="parameters">The navigation parameters</param>
            <returns>If <c>true</c> a go back operation was successful. If <c>false</c> the go back operation failed.</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Prism.Navigation.INavigationService.NavigateAsync(System.Uri)" -->
        <!-- Badly formed XML comment ignored for member "M:Prism.Navigation.INavigationService.NavigateAsync(System.Uri,Prism.Navigation.NavigationParameters)" -->
        <member name="M:Prism.Navigation.INavigationService.NavigateAsync(System.String)">
            <summary>
            Initiates navigation to the target specified by the <paramref name="name"/>.
            </summary>
            <param name="name">The name of the target to navigate to.</param>
        </member>
        <member name="M:Prism.Navigation.INavigationService.NavigateAsync(System.String,Prism.Navigation.NavigationParameters)">
            <summary>
            Initiates navigation to the target specified by the <paramref name="name"/>.
            </summary>
            <param name="name">The name of the target to navigate to.</param>
            <param name="parameters">The navigation parameters</param>
        </member>
        <member name="M:Prism.Navigation.INavigationServiceExtensions.GoBackAsync(Prism.Navigation.INavigationService,Prism.Navigation.NavigationParameters,System.Nullable{System.Boolean},System.Boolean)">
            <summary>
            Navigates to the most recent entry in the back navigation history by popping the calling Page off the navigation stack.
            </summary>
            <param name="parameters">The navigation parameters</param>
            <param name="useModalNavigation">If <c>true</c> uses PopModalAsync, if <c>false</c> uses PopAsync</param>
            <param name="animated">If <c>true</c> the transition is animated, if <c>false</c> there is no animation on transition.</param>
            <returns>If <c>true</c> a go back operation was successful. If <c>false</c> the go back operation failed.</returns>
        </member>
        <member name="M:Prism.Navigation.INavigationServiceExtensions.GoBackToRootAsync(Prism.Navigation.INavigationService,Prism.Navigation.NavigationParameters)">
            <summary>
            When navigating inside a NavigationPage: Pops all but the root Page off the navigation stack
            </summary>
            <param name="navigationService">The INavigatinService instance</param>
            <param name="parameters">The navigation parameters</param>
            <remarks>Only works when called from a View within a NavigationPage</remarks>
        </member>
        <member name="M:Prism.Navigation.INavigationServiceExtensions.NavigateAsync(Prism.Navigation.INavigationService,System.String,Prism.Navigation.NavigationParameters,System.Nullable{System.Boolean},System.Boolean)">
            <summary>
            Initiates navigation to the target specified by the <paramref name="name"/>.
            </summary>
            <param name="name">The name of the target to navigate to.</param>
            <param name="parameters">The navigation parameters</param>
            <param name="useModalNavigation">If <c>true</c> uses PopModalAsync, if <c>false</c> uses PopAsync</param>
            <param name="animated">If <c>true</c> the transition is animated, if <c>false</c> there is no animation on transition.</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Prism.Navigation.INavigationServiceExtensions.NavigateAsync(Prism.Navigation.INavigationService,System.Uri,Prism.Navigation.NavigationParameters,System.Nullable{System.Boolean},System.Boolean)" -->
        <member name="M:Prism.Navigation.INavigationServiceExtensions.GetNavigationUriPath(Prism.Navigation.INavigationService)">
            <summary>
            Gets an absolute path of the current page as it relates to it's position in the navigation stack.
            </summary>
            <returns>The absolute path of the current Page</returns>
        </member>
        <member name="F:Prism.Navigation.KnownNavigationParameters.CreateTab">
            <summary>
            Used to dynamically create a Page that will be used as a Tab when navigating to a TabbedPage.
            </summary>
        </member>
        <member name="F:Prism.Navigation.KnownNavigationParameters.SelectedTab">
            <summary>
            Used to select an existing Tab when navigating to a Tabbedpage.
            </summary>
        </member>
        <member name="F:Prism.Navigation.KnownNavigationParameters.UseModalNavigation">
            <summary>
            Used to control the navigation stack. If <c>true</c> uses PopModalAsync, if <c>false</c> uses PopAsync.
            </summary>
        </member>
        <member name="T:Prism.Navigation.NavigationParameters">
            <summary>
            Represents Navigation parameters.
            </summary>
            <remarks>
            This class can be used to to pass object parameters during Navigation. 
            </remarks>
        </member>
        <member name="P:Prism.Navigation.NavigationParameters.Count">
            <summary>
            Gets the number of parameters contained in the NavigationParameters
            </summary>
        </member>
        <member name="P:Prism.Navigation.NavigationParameters.Keys">
            <summary>
            Gets an IEnumerable containing the keys in the NavigationParameters
            </summary>
        </member>
        <member name="M:Prism.Navigation.NavigationParameters.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Prism.Navigation.NavigationParameters"/> class.
            </summary>
        </member>
        <member name="M:Prism.Navigation.NavigationParameters.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Prism.Navigation.NavigationParameters"/> class with a query string.
            </summary>
            <param name="query">The query string.</param>
        </member>
        <member name="P:Prism.Navigation.NavigationParameters.Item(System.String)">
            <summary>
            Gets the <see cref="T:System.String"/> with the specified key.
            </summary>
            <returns>The value for the specified key, or <see langword="null"/> if the query does not contain such a key.</returns>
        </member>
        <member name="M:Prism.Navigation.NavigationParameters.GetEnumerator">
            <summary>
            Gets the enumerator.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Prism.Navigation.NavigationParameters.Add(System.String,System.Object)">
            <summary>
            Adds the specified key and value.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Prism.Navigation.NavigationParameters.ContainsKey(System.String)">
            <summary>
            Determines whether the NavigationParameters contains the specified key
            </summary>
            <param name="key">The key to locate</param>
        </member>
        <member name="M:Prism.Navigation.NavigationParameters.GetValue``1(System.String)">
            <summary>
            Gets a strongly typed value with the specified key.
            </summary>
            <typeparam name="T">The type to cast/convert the value to.</typeparam>
            <param name="key">The key.</param>
            <returns>The value.</returns>
        </member>
        <member name="M:Prism.Navigation.NavigationParameters.TryGetValue``1(System.String,``0@)">
            <summary>
            Gets a strongly typed value with the specified key.
            </summary>
            <typeparam name="T">The type to cast/convert the value to.</typeparam>
            <param name="key">The key.</param>
            <param name="value">Key value if such key exists.</param>
            <returns>True if such key exists.</returns>
        </member>
        <member name="M:Prism.Navigation.NavigationParameters.GetValues``1(System.String)">
            <summary>
            Gets a strongly typed collection containing the values with the specified key.
            </summary>
            <typeparam name="T">The type to cast/convert the value to.</typeparam>
            <param name="key">The key.</param>
            <returns>The collection of values.</returns>
        </member>
        <member name="M:Prism.Navigation.NavigationParameters.ToString">
            <summary>
            Converts the list of key value pairs to a query string.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Prism.Navigation.PageNavigationService">
            <summary>
            Provides page based navigation for ViewModels.
            </summary>
        </member>
        <member name="M:Prism.Navigation.PageNavigationService.GoBackAsync">
            <summary>
            Navigates to the most recent entry in the back navigation history by popping the calling Page off the navigation stack.
            </summary>
            <returns>If <c>true</c> a go back operation was successful. If <c>false</c> the go back operation failed.</returns>
        </member>
        <member name="M:Prism.Navigation.PageNavigationService.GoBackAsync(Prism.Navigation.NavigationParameters)">
            <summary>
            Navigates to the most recent entry in the back navigation history by popping the calling Page off the navigation stack.
            </summary>
            <param name="parameters">The navigation parameters</param>
            <returns>If <c>true</c> a go back operation was successful. If <c>false</c> the go back operation failed.</returns>
        </member>
        <member name="M:Prism.Navigation.PageNavigationService.GoBackInternal(Prism.Navigation.NavigationParameters,System.Nullable{System.Boolean},System.Boolean)">
            <summary>
            Navigates to the most recent entry in the back navigation history by popping the calling Page off the navigation stack.
            </summary>
            <param name="parameters">The navigation parameters</param>
            <param name="useModalNavigation">If <c>true</c> uses PopModalAsync, if <c>false</c> uses PopAsync</param>
            <param name="animated">If <c>true</c> the transition is animated, if <c>false</c> there is no animation on transition.</param>
            <returns>If <c>true</c> a go back operation was successful. If <c>false</c> the go back operation failed.</returns>
        </member>
        <member name="M:Prism.Navigation.PageNavigationService.GoBackToRootInternal(Prism.Navigation.NavigationParameters)">
            <summary>
            When navigating inside a NavigationPage: Pops all but the root Page off the navigation stack
            </summary>
            <param name="navigationService">The INavigatinService instance</param>
            <param name="parameters">The navigation parameters</param>
            <remarks>Only works when called from a View within a NavigationPage</remarks>
        </member>
        <member name="M:Prism.Navigation.PageNavigationService.NavigateAsync(System.String)">
            <summary>
            Initiates navigation to the target specified by the <paramref name="name"/>.
            </summary>
            <param name="name">The name of the target to navigate to.</param>
        </member>
        <member name="M:Prism.Navigation.PageNavigationService.NavigateAsync(System.String,Prism.Navigation.NavigationParameters)">
            <summary>
            Initiates navigation to the target specified by the <paramref name="name"/>.
            </summary>
            <param name="name">The name of the target to navigate to.</param>
            <param name="parameters">The navigation parameters</param>
        </member>
        <member name="M:Prism.Navigation.PageNavigationService.NavigateInternal(System.String,Prism.Navigation.NavigationParameters,System.Nullable{System.Boolean},System.Boolean)">
            <summary>
            Initiates navigation to the target specified by the <paramref name="name"/>.
            </summary>
            <param name="name">The name of the target to navigate to.</param>
            <param name="parameters">The navigation parameters</param>
            <param name="useModalNavigation">If <c>true</c> uses PopModalAsync, if <c>false</c> uses PopAsync</param>
            <param name="animated">If <c>true</c> the transition is animated, if <c>false</c> there is no animation on transition.</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Prism.Navigation.PageNavigationService.NavigateAsync(System.Uri)" -->
        <!-- Badly formed XML comment ignored for member "M:Prism.Navigation.PageNavigationService.NavigateAsync(System.Uri,Prism.Navigation.NavigationParameters)" -->
        <!-- Badly formed XML comment ignored for member "M:Prism.Navigation.PageNavigationService.NavigateInternal(System.Uri,Prism.Navigation.NavigationParameters,System.Nullable{System.Boolean},System.Boolean)" -->
        <member name="P:Prism.PrismApplicationBase.Container">
            <summary>
            The dependency injection container used to resolve objects
            </summary>
        </member>
        <member name="P:Prism.PrismApplicationBase.NavigationService">
            <summary>
            Gets the <see cref="T:Prism.Navigation.INavigationService"/> for the application.
            </summary>
        </member>
        <member name="P:Prism.PrismApplicationBase.PlatformInitializer">
            <summary>
            Get the Platform Initializer
            </summary>
        </member>
        <member name="M:Prism.PrismApplicationBase.InitializeInternal">
            <summary>
            Run the initialization process.
            </summary>
        </member>
        <member name="M:Prism.PrismApplicationBase.ConfigureViewModelLocator">
            <summary>
            Configures the <see cref="T:Prism.Mvvm.ViewModelLocator"/> used by Prism.
            </summary>
        </member>
        <member name="M:Prism.PrismApplicationBase.Initialize">
            <summary>
            Run the bootstrapper process.
            </summary>
        </member>
        <member name="M:Prism.PrismApplicationBase.CreateContainerExtension">
            <summary>
            Creates the container used by Prism.
            </summary>
            <returns>The container</returns>
        </member>
        <member name="M:Prism.PrismApplicationBase.RegisterRequiredTypes(Prism.Ioc.IContainerRegistry)">
            <summary>
            Registers all types that are required by Prism to function with the container.
            </summary>
            <param name="containerRegistry"></param>
        </member>
        <member name="M:Prism.PrismApplicationBase.RegisterTypes(Prism.Ioc.IContainerRegistry)">
            <summary>
            Used to register types with the container that will be used by your application.
            </summary>
        </member>
        <member name="M:Prism.PrismApplicationBase.ConfigureModuleCatalog(Prism.Modularity.IModuleCatalog)">
            <summary>
            Configures the <see cref="T:Prism.Modularity.IModuleCatalog"/> used by Prism.
            </summary>
            <param name="moduleCatalog">The ModuleCatalog to configure</param>
        </member>
        <member name="M:Prism.PrismApplicationBase.InitializeModules">
            <summary>
            Initializes the modules.
            </summary>
        </member>
        <member name="M:Prism.PrismApplicationBase.OnInitialized">
            <summary>
            Called when the PrismApplication has completed it's initialization process.
            </summary>
        </member>
        <member name="T:Prism.Services.DependencyService">
            <summary>
            A service that provides acess to platform-specific implementations of a specified type
            </summary>
        </member>
        <member name="M:Prism.Services.DependencyService.Get``1">
            <summary>
            Returns a platform-specific implementation of a type registered with the Xamarin.Forms.DependencyService
            </summary>
            <typeparam name="T">The type of class to get</typeparam>
            <returns>The class instance</returns>
        </member>
        <member name="T:Prism.Services.DeviceService">
            <summary>
            A service that exposes device-specific information and actions
            </summary>
        </member>
        <member name="P:Prism.Services.DeviceService.Idiom">
            <summary>
            Gets the kind of device that Xamarin.Forms is currently working on.
            </summary>
        </member>
        <member name="P:Prism.Services.DeviceService.Platform">
            <summary>
            Gets the Platform (OS) that Xamarin.Forms is working on.
            </summary>
        </member>
        <member name="P:Prism.Services.DeviceService.DeviceRuntimePlatform">
            <summary>
            Gets the Platform (OS) that the application is running on.  This is the native Device.RunTimePlatform property.
            </summary>
        </member>
        <member name="P:Prism.Services.DeviceService.RuntimePlatform">
            <summary>
            Gets the Platform (OS) that the application is running on. The result is an enum of type RuntimePlatform.
            </summary>
        </member>
        <member name="M:Prism.Services.DeviceService.BeginInvokeOnMainThread(System.Action)">
            <summary>
            Invokes an action on the device main UI thread.
            </summary>
            <param name="action">The Action to invoke</param>
        </member>
        <member name="M:Prism.Services.DeviceService.OnPlatform(System.Action,System.Action,System.Action,System.Action)">
            <summary>
            Executes different actions depending on which Platform (OS) that Xamarin.Forms is working.
            </summary>
            <param name="iOS">Action to execute when running on iOS</param>
            <param name="android">Action to execute when running on Android</param>
            <param name="winPhone">Action to execute when running on WinPhone</param>
            <param name="defaultAction">Action to execute if no Action was provided for the current Platform (OS)</param>
        </member>
        <member name="M:Prism.Services.DeviceService.OnPlatform``1(``0,``0,``0)">
            <summary>
            Returns different values depending on the Platform (OS) that Xamarin.Forms is working.
            </summary>
            <typeparam name="T">Type of value to be returned</typeparam>
            <param name="iOS">The value for iOS</param>
            <param name="android">The value for Android</param>
            <param name="winPhone">The value for WinPhone</param>
            <returns>The value for the current Platform (OS)</returns>
        </member>
        <member name="M:Prism.Services.DeviceService.OpenUri(System.Uri)">
            <summary>
            Request the device open a Uri.
            </summary>
            <param name="uri">The Uri to open</param>
        </member>
        <member name="M:Prism.Services.DeviceService.StartTimer(System.TimeSpan,System.Func{System.Boolean})">
            <summary>
            Starts a recurring timer using the Device clock capabilities.
            </summary>
            <param name="interval">The interval between invocations of the callback </param>
            <param name="callBack">Action to run when the timer elapses</param>
        </member>
        <member name="T:Prism.Services.IDependencyService">
            <summary>
            A service that provides acess to platform-specific implementations of a specified type
            </summary>
        </member>
        <member name="M:Prism.Services.IDependencyService.Get``1">
            <summary>
            Returns a platform-specific implementation of a type registered with the Xamarin.Forms.DependencyService
            </summary>
            <typeparam name="T">The type of class to get</typeparam>
            <returns>The class instance</returns>
        </member>
        <member name="T:Prism.Services.IDeviceService">
            <summary>
            A service that exposes device-specific information and actions
            </summary>
        </member>
        <member name="P:Prism.Services.IDeviceService.Idiom">
            <summary>
            Gets the kind of device that Xamarin.Forms is currently working on.
            </summary>
        </member>
        <member name="P:Prism.Services.IDeviceService.Platform">
            <summary>
            Gets the Platform (OS) that Xamarin.Forms is working on.
            </summary>
        </member>
        <member name="P:Prism.Services.IDeviceService.DeviceRuntimePlatform">
            <summary>
            Gets the Platform (OS) that the application is running on.  This is the native Device.RunTimePlatform property.
            </summary>
        </member>
        <member name="P:Prism.Services.IDeviceService.RuntimePlatform">
            <summary>
            Gets the Platform (OS) that the application is running on. The result is an enum of type RuntimePlatform.
            </summary>
        </member>
        <member name="M:Prism.Services.IDeviceService.BeginInvokeOnMainThread(System.Action)">
            <summary>
            Invokes an action on the device main UI thread.
            </summary>
            <param name="action">The Action to invoke</param>
        </member>
        <member name="M:Prism.Services.IDeviceService.OnPlatform(System.Action,System.Action,System.Action,System.Action)">
            <summary>
            Executes different actions depending on which Platform (OS) that Xamarin.Forms is working.
            </summary>
            <param name="iOS">Action to execute when running on iOS</param>
            <param name="android">Action to execute when running on Android</param>
            <param name="winPhone">Action to execute when running on WinPhone</param>
            <param name="defaultAction">Action to execute if no Action was provided for the current Platform (OS)</param>
        </member>
        <member name="M:Prism.Services.IDeviceService.OnPlatform``1(``0,``0,``0)">
            <summary>
            Returns different values depending on the Platform (OS) that Xamarin.Forms is working.
            </summary>
            <typeparam name="T">Type of value to be returned</typeparam>
            <param name="iOS">The value for iOS</param>
            <param name="android">The value for Android</param>
            <param name="winPhone">The value for WinPhone</param>
            <returns>The value for the current Platform (OS)</returns>
        </member>
        <member name="M:Prism.Services.IDeviceService.OpenUri(System.Uri)">
            <summary>
            Request the device open a Uri.
            </summary>
            <param name="uri">The Uri to open</param>
        </member>
        <member name="M:Prism.Services.IDeviceService.StartTimer(System.TimeSpan,System.Func{System.Boolean})">
            <summary>
            Starts a recurring timer using the Device clock capabilities.
            </summary>
            <param name="interval">The interval between invocations of the callback </param>
            <param name="callBack">Action to run when the timer elapses</param>
        </member>
        <member name="T:Prism.Services.ActionSheetButton">
            <summary>
            Represents a button displayed in <see cref="M:Prism.Services.IPageDialogService.DisplayActionSheetAsync(System.String,Prism.Services.IActionSheetButton[])"/>
            </summary>
        </member>
        <member name="P:Prism.Services.ActionSheetButton.Action">
            <summary>
            Action to perform when the button is pressed
            </summary>
            <value>The action.</value>
        </member>
        <member name="M:Prism.Services.ActionSheetButton.OnButtonPressed">
            <summary>
            Executes the action to take when the button is pressed
            </summary>
        </member>
        <member name="M:Prism.Services.ActionSheetButton.CreateCancelButton(System.String,System.Windows.Input.ICommand)">
            <summary>
            Create a new instance of <see cref="T:Prism.Services.ActionSheetButton"/> that display as "cancel button"
            </summary>
            <param name="text">Button text</param>
            <param name="command">Command to execute when button pressed</param>
            <returns>An instance of <see cref="T:Prism.Services.ActionSheetButton"/></returns>
        </member>
        <member name="M:Prism.Services.ActionSheetButton.CreateCancelButton(System.String,System.Action)">
            <summary>
            Create a new instance of <see cref="T:Prism.Services.ActionSheetButton"/> that display as "cancel button"
            </summary>
            <param name="text">Button text</param>
            <param name="action">Action to execute when button pressed</param>
            <returns>An instance of <see cref="T:Prism.Services.ActionSheetButton"/></returns>
        </member>
        <member name="M:Prism.Services.ActionSheetButton.CreateCancelButton``1(System.String,System.Windows.Input.ICommand,``0)">
            <summary>
            Create a new instance of <see cref="T:Prism.Services.ActionSheetButton"/> that display as "cancel button"
            </summary>
            <param name="text">Button text</param>
            <param name="command">Command to execute when button pressed</param>
            <param name="parameter">Parameter to pass the command when the button is pressed</param>
            <returns>An instance of <see cref="T:Prism.Services.ActionSheetButton"/></returns>
        </member>
        <member name="M:Prism.Services.ActionSheetButton.CreateCancelButton``1(System.String,System.Action{``0},``0)">
            <summary>
            Create a new instance of <see cref="T:Prism.Services.ActionSheetButton"/> that display as "cancel button"
            </summary>
            <param name="text">Button text</param>
            <param name="action">Action to execute when button pressed</param>
            <param name="parameter">Parameter to pass the Action when the button is pressed</param>
            <returns>An instance of <see cref="T:Prism.Services.ActionSheetButton"/></returns>
        </member>
        <member name="M:Prism.Services.ActionSheetButton.CreateDestroyButton(System.String,System.Windows.Input.ICommand)">
            <summary>
            Create a new instance of <see cref="T:Prism.Services.ActionSheetButton"/> that display as "destroy button"
            </summary>
            <param name="text">Button text</param>
            <param name="command">Command to execute when button pressed</param>
            <returns>An instance of <see cref="T:Prism.Services.ActionSheetButton"/></returns>
        </member>
        <member name="M:Prism.Services.ActionSheetButton.CreateDestroyButton(System.String,System.Action)">
            <summary>
            Create a new instance of <see cref="T:Prism.Services.ActionSheetButton"/> that display as "destroy button"
            </summary>
            <param name="text">Button text</param>
            <param name="action">Action to execute when button pressed</param>
            <returns>An instance of <see cref="T:Prism.Services.ActionSheetButton"/></returns>
        </member>
        <member name="M:Prism.Services.ActionSheetButton.CreateDestroyButton``1(System.String,System.Windows.Input.ICommand,``0)">
            <summary>
            Create a new instance of <see cref="T:Prism.Services.ActionSheetButton"/> that display as "destroy button"
            </summary>
            <param name="text">Button text</param>
            <param name="command">Command to execute when button pressed</param>
            <param name="parameter">Parameter to pass the command when the button is pressed</param>
            <returns>An instance of <see cref="T:Prism.Services.ActionSheetButton"/></returns>
        </member>
        <member name="M:Prism.Services.ActionSheetButton.CreateDestroyButton``1(System.String,System.Action{``0},``0)">
            <summary>
            Create a new instance of <see cref="T:Prism.Services.ActionSheetButton"/> that display as "destroy button"
            </summary>
            <param name="text">Button text</param>
            <param name="action">Action to execute when button pressed</param>
            <param name="parameter">Parameter to pass the action when the button is pressed</param>
            <returns>An instance of <see cref="T:Prism.Services.ActionSheetButton"/></returns>
        </member>
        <member name="M:Prism.Services.ActionSheetButton.CreateButton(System.String,System.Windows.Input.ICommand)">
            <summary>
            Create a new instance of <see cref="T:Prism.Services.ActionSheetButton"/> that display as "other button"
            </summary>
            <param name="text">Button text</param>
            <param name="command">Command to execute when button pressed</param>
            <returns>An instance of <see cref="T:Prism.Services.ActionSheetButton"/></returns>
        </member>
        <member name="M:Prism.Services.ActionSheetButton.CreateButton(System.String,System.Action)">
            <summary>
            Create a new instance of <see cref="T:Prism.Services.ActionSheetButton"/> that display as "other button"
            </summary>
            <param name="text">Button text</param>
            <param name="action">Action to execute when button pressed</param>
            <returns>An instance of <see cref="T:Prism.Services.ActionSheetButton"/></returns>
        </member>
        <member name="M:Prism.Services.ActionSheetButton.CreateButton``1(System.String,System.Windows.Input.ICommand,``0)">
            <summary>
            Create a new instance of <see cref="T:Prism.Services.ActionSheetButton"/> that display as "other button"
            </summary>
            <param name="text">Button text</param>
            <param name="command">Command to execute when button pressed</param>
            <param name="parameter">The parameter to pass the command when the button is pressed</param>
            <returns>An instance of <see cref="T:Prism.Services.ActionSheetButton"/></returns>
        </member>
        <member name="M:Prism.Services.ActionSheetButton.CreateButton``1(System.String,System.Action{``0},``0)">
            <summary>
            Create a new instance of <see cref="T:Prism.Services.ActionSheetButton"/> that display as "other button"
            </summary>
            <param name="text">Button text</param>
            <param name="action">Action to execute when button pressed</param>
            <param name="parameter">Parameter to pass the action when the button is pressed</param>
            <returns>An instance of <see cref="T:Prism.Services.ActionSheetButton"/></returns>
        </member>
        <member name="T:Prism.Services.ActionSheetButtonBase">
            <summary>
            ActionSheetButton Base class
            </summary>
        </member>
        <member name="P:Prism.Services.ActionSheetButtonBase._command">
            <summary>
            <see cref="T:System.Windows.Input.ICommand"/> backing <see cref="T:Prism.Services.IActionSheetButton"/>'s Command property
            </summary>
            <value>The command.</value>
        </member>
        <member name="P:Prism.Services.ActionSheetButtonBase._isCancel">
            <summary>
            Gets a value indicating whether this <see cref="T:Prism.Services.IActionSheetButton"/>
            is cancel.
            </summary>
            <value><c>true</c> if is cancel; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Prism.Services.ActionSheetButtonBase._isDestroy">
            <summary>
            Gets a value indicating whether this <see cref="T:Prism.Services.IActionSheetButton"/>
            is destroy.
            </summary>
            <value><c>true</c> if is destroy; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Prism.Services.ActionSheetButtonBase._text">
            <summary>
            The backing text for <see cref="T:Prism.Services.IActionSheetButton"/>
            </summary>
            <value>The text.</value>
        </member>
        <member name="P:Prism.Services.ActionSheetButtonBase.Command">
            <summary>
            Command to execute when the button is pressed
            </summary>
            <value>The command.</value>
        </member>
        <member name="P:Prism.Services.ActionSheetButtonBase.IsCancel">
            <summary>
            The button will be used as a Cancel Button
            </summary>
            <value><c>true</c> if is cancel; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Prism.Services.ActionSheetButtonBase.IsDestroy">
            <summary>
            The button will be used as a Destroy Button
            </summary>
            <value><c>true</c> if is destroy; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Prism.Services.ActionSheetButtonBase.Text">
            <summary>
            Executes the action to take when the button is pressed
            </summary>
            <value>The text.</value>
        </member>
        <member name="M:Prism.Services.ActionSheetButtonBase.OnButtonPressed">
            <summary>
            Executes the action.
            </summary>
        </member>
        <member name="P:Prism.Services.ActionSheetButtonBase.Prism#Services#IActionSheetButton#IsCancel">
            <inheritDoc />
        </member>
        <member name="P:Prism.Services.ActionSheetButtonBase.Prism#Services#IActionSheetButton#IsDestroy">
            <inheritDoc />
        </member>
        <member name="P:Prism.Services.ActionSheetButtonBase.Prism#Services#IActionSheetButton#Text">
            <inheritDoc />
        </member>
        <member name="M:Prism.Services.ActionSheetButtonBase.Prism#Services#IActionSheetButton#PressButton">
            <inheritDoc />
        </member>
        <member name="T:Prism.Services.ActionSheetButton`1">
            <summary>
            Provides a Generic Implementation for IActionSheetButton
            </summary>
        </member>
        <member name="P:Prism.Services.ActionSheetButton`1.Action">
            <summary>
            Generic Action to perform
            </summary>
            <value>The action.</value>
        </member>
        <member name="P:Prism.Services.ActionSheetButton`1.Parameter">
            <summary>
            Typed Parameter
            </summary>
            <value>The parameter.</value>
        </member>
        <member name="M:Prism.Services.ActionSheetButton`1.OnButtonPressed">
            <summary>
            Executes the action to take when the button is pressed
            </summary>
        </member>
        <member name="T:Prism.Services.IActionSheetButton">
            <summary>
            Convenient contract to enable executing commands directly when using <see cref="M:Prism.Services.IPageDialogService.DisplayActionSheetAsync(System.String,Prism.Services.IActionSheetButton[])"/>
            </summary>
        </member>
        <member name="P:Prism.Services.IActionSheetButton.IsDestroy">
            <summary>
            The button will be used as destroy
            </summary>
        </member>
        <member name="P:Prism.Services.IActionSheetButton.IsCancel">
            <summary>
            The button will be used as cancel
            </summary>
        </member>
        <member name="P:Prism.Services.IActionSheetButton.Text">
            <summary>
            Text to display in the action sheet
            </summary>
        </member>
        <member name="M:Prism.Services.IActionSheetButton.PressButton">
            <summary>
            Presses the button.
            </summary>
        </member>
        <member name="T:Prism.Services.IPageDialogService">
            <summary>
            A service which provides access to the DisplayAlert and DisplayActionSheet off of the Xamarin.Forms.Page class.
            </summary>
        </member>
        <member name="M:Prism.Services.IPageDialogService.DisplayAlertAsync(System.String,System.String,System.String,System.String)">
            <summary>
            Presents an alert dialog to the application user with an accept and a cancel button.
            </summary>
            <para>
            The <paramref name="message"/> can be empty.
            </para>
            <param name="title">Title to display.</param>
            <param name="message">Message to display.</param>
            <param name="acceptButton">Text for the accept button.</param>
            <param name="cancelButton">Text for the cancel button.</param>
            <returns><c>true</c> if non-destructive button pressed; otherwise <c>false</c>/></returns>
        </member>
        <member name="M:Prism.Services.IPageDialogService.DisplayAlertAsync(System.String,System.String,System.String)">
            <summary>
            Presents an alert dialog to the application user with a single cancel button.
            </summary>
            <para>
            The <paramref name="message"/> can be empty.
            </para>
            <param name="title">Title to display.</param>
            <param name="message">Message to display.</param>
            <param name="cancelButton">Text for the cancel button.</param>
            <returns></returns>
        </member>
        <member name="M:Prism.Services.IPageDialogService.DisplayActionSheetAsync(System.String,System.String,System.String,System.String[])">
            <summary>
            Displays a native platform action sheet, allowing the application user to choose from serveral buttons.
            </summary>
            <param name="title">Title to display in view.</param>
            <param name="cancelButton">Text for the cancel button.</param>
            <param name="destroyButton">Text for the ok button.</param>
            <param name="otherButtons">Text for other buttons.</param>
            <returns>Text for the pressed button</returns>
        </member>
        <member name="M:Prism.Services.IPageDialogService.DisplayActionSheetAsync(System.String,Prism.Services.IActionSheetButton[])">
            <summary>
            Displays a native platform action sheet, allowing the application user to choose from serveral buttons.
            </summary>
            <para>
            The text displayed in the action sheet will be the value for <see cref="P:Prism.Services.IActionSheetButton.Text"/> and when pressed
            the <see cref="!:IActionSheetButton.Command"/> will be executed.
            </para>
            <param name="title">Text to display in action sheet</param>
            <param name="buttons">Buttons displayed in action sheet</param>
            <returns></returns>
        </member>
        <member name="T:Prism.Services.PageDialogService">
            <summary>
            
            </summary>
        </member>
        <member name="M:Prism.Services.PageDialogService.DisplayAlertAsync(System.String,System.String,System.String,System.String)">
            <summary>
            Presents an alert dialog to the application user with an accept and a cancel button.
            </summary>
            <para>
            The <paramref name="message"/> can be empty.
            </para>
            <param name="title">Title to display.</param>
            <param name="message">Message to display.</param>
            <param name="acceptButton">Text for the accept button.</param>
            <param name="cancelButton">Text for the cancel button.</param>
            <returns><c>true</c> if non-destructive button pressed; otherwise <c>false</c>/></returns>
        </member>
        <member name="M:Prism.Services.PageDialogService.DisplayAlertAsync(System.String,System.String,System.String)">
            <summary>
            Presents an alert dialog to the application user with a single cancel button.
            </summary>
            <para>
            The <paramref name="message"/> can be empty.
            </para>
            <param name="title">Title to display.</param>
            <param name="message">Message to display.</param>
            <param name="cancelButton">Text for the cancel button.</param>
            <returns></returns>
        </member>
        <member name="M:Prism.Services.PageDialogService.DisplayActionSheetAsync(System.String,System.String,System.String,System.String[])">
            <summary>
            Displays a native platform action sheet, allowing the application user to choose from serveral buttons.
            </summary>
            <param name="title">Title to display in view.</param>
            <param name="cancelButton">Text for the cancel button.</param>
            <param name="destroyButton">Text for the ok button.</param>
            <param name="otherButtons">Text for other buttons.</param>
            <returns>Text for the pressed button</returns>
        </member>
        <member name="M:Prism.Services.PageDialogService.DisplayActionSheetAsync(System.String,Prism.Services.IActionSheetButton[])">
            <summary>
            Displays a native platform action sheet, allowing the application user to choose from serveral buttons.
            </summary>
            <para>
            The text displayed in the action sheet will be the value for <see cref="P:Prism.Services.IActionSheetButton.Text"/> and when pressed
            the <see cref="T:System.Windows.Input.ICommand"/> or <see cref="T:System.Action"/> will be executed.
            </para>
            <param name="title">Text to display in action sheet</param>
            <param name="buttons">Buttons displayed in action sheet</param>
            <returns></returns>
        </member>
    </members>
</doc>
