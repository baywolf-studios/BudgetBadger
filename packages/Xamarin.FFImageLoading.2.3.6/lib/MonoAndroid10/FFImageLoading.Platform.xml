<?xml version="1.0"?>
<doc>
    <assembly>
        <name>FFImageLoading.Platform</name>
    </assembly>
    <members>
        <member name="T:FFImageLoading.Cache.SimpleDiskCache">
            <summary>
            Disk cache iOS/Android implementation.
            </summary>
        </member>
        <member name="M:FFImageLoading.Cache.SimpleDiskCache.#ctor(System.String,FFImageLoading.Config.Configuration)">
            <summary>
            Initializes a new instance of the <see cref="T:FFImageLoading.Cache.SimpleDiskCache"/> class.
            </summary>
            <param name="cachePath">Cache path.</param>
            <param name="configuration">Configuration.</param>
        </member>
        <member name="M:FFImageLoading.Cache.SimpleDiskCache.CreateCache(System.String,FFImageLoading.Config.Configuration)">
            <summary>
            Creates the cache.
            </summary>
            <returns>The cache.</returns>
            <param name="cacheName">Cache name.</param>
            <param name="configuration">Configuration.</param>
        </member>
        <member name="M:FFImageLoading.Cache.SimpleDiskCache.AddToSavingQueueIfNotExistsAsync(System.String,System.Byte[],System.TimeSpan,System.Action)">
            <summary>
            Adds the file to cache and file saving queue if it does not exists.
            </summary>
            <param name="key">Key to store/retrieve the file.</param>
            <param name="bytes">File data in bytes.</param>
            <param name="duration">Specifies how long an item should remain in the cache.</param>
            <param name="writeFinished">Write finished.</param>
        </member>
        <member name="M:FFImageLoading.Cache.SimpleDiskCache.RemoveAsync(System.String)">
            <summary>
            Removes the specified cache entry.
            </summary>
            <param name="key">Key.</param>
        </member>
        <member name="M:FFImageLoading.Cache.SimpleDiskCache.ClearAsync">
            <summary>
            Clears all cache entries.
            </summary>
        </member>
        <member name="M:FFImageLoading.Cache.SimpleDiskCache.ExistsAsync(System.String)">
            <summary>
            Checks if cache entry exists/
            </summary>
            <returns>The async.</returns>
            <param name="key">Key.</param>
        </member>
        <member name="M:FFImageLoading.Cache.SimpleDiskCache.TryGetStreamAsync(System.String)">
            <summary>
            Tries to get cached file as stream.
            </summary>
            <returns>The get stream.</returns>
            <param name="key">Key.</param>
        </member>
        <member name="M:FFImageLoading.Cache.ImageCache`1.GetBitmapDrawableFromReusableSet(Android.Graphics.BitmapFactory.Options)">
            <summary>
            Attempts to find a bitmap suitable for reuse based on the given dimensions.
            Note that any returned instance will have SetIsRetained(true) called on it
            to ensure that it does not release its resources prematurely as it is leaving
            cache management. This means you must call SetIsRetained(false) when you no
            longer need the instance.
            </summary>
            <returns>A ISelfDisposingBitmapDrawable.</returns>
            <param name="options">Bitmap creation options.</param>
        </member>
        <member name="M:FFImageLoading.Cache.IImageCache`1.GetBitmapDrawableFromReusableSet(Android.Graphics.BitmapFactory.Options)">
            <summary>
            Attempts to find a bitmap suitable for reuse based on the given dimensions.
            Note that any returned instance will have SetIsRetained(true) called on it
            to ensure that it does not release its resources prematurely as it is leaving
            cache management. This means you must call SetIsRetained(false) when you no
            longer need the instance.
            </summary>
            <returns>A SelfDisposingBitmapDrawable that has been retained. You must call SetIsRetained(false)
            when finished using it.</returns>
            <param name="options">Bitmap creation options.</param>
        </member>
        <member name="F:FFImageLoading.Cache.ReuseBitmapDrawableCache`1.displayed_cache">
            <summary>
            Contains all entries that are currently being displayed. These entries are not eligible for
            reuse or eviction. Entries will be added to the reuse pool when they are no longer displayed.
            </summary>
        </member>
        <member name="F:FFImageLoading.Cache.ReuseBitmapDrawableCache`1.reuse_pool">
            <summary>
            Contains entries that potentially available for reuse and candidates for eviction.
            This is the default location for newly added entries. This cache
            is searched along with the displayed cache for cache hits. If a cache hit is found here, its
            place in the LRU list will be refreshed. Items only move out of reuse and into displayed
            when the entry has SetIsDisplayed(true) called on it.
            </summary>
        </member>
        <member name="M:FFImageLoading.Cache.ReuseBitmapDrawableCache`1.#ctor(FFImageLoading.Helpers.IMiniLogger,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="!:ReuseBitmapDrawableCache"/> class.
            </summary>
            <param name="logger">Logger for debug messages</param>
            <param name="highWatermark">Maximum number of bytes the reuse pool will hold before starting evictions.</param>
            <param name="lowWatermark">Number of bytes the reuse pool will be drained down to after the high watermark is exceeded.</param>
            <param name="verboseLogging">If set to <c>true</c> verbose logging.</param>
        </member>
        <member name="M:FFImageLoading.Cache.ReuseBitmapDrawableCache`1.GetReusableBitmapDrawable(Android.Graphics.BitmapFactory.Options)">
            <summary>
            Attempts to find a bitmap suitable for reuse based on the given dimensions.
            Note that any returned instance will have SetIsRetained(true) called on it
            to ensure that it does not release its resources prematurely as it is leaving
            cache management. This means you must call SetIsRetained(false) when you no
            longer need the instance.
            </summary>
            <returns>A ISelfDisposingBitmapDrawable that has been retained. You must call SetIsRetained(false)
            when finished using it.</returns>
            <param name="options">Options.</param>
        </member>
        <member name="M:FFImageLoading.Cache.ReuseBitmapDrawableCache`1.GetBytesPerPixel(Android.Graphics.Bitmap.Config)">
            <summary>
            Return the byte usage per pixel of a bitmap based on its configuration.
            </summary>
            <param name="config">The bitmap configuration</param>
            <returns>The byte usage per pixel</returns>
        </member>
        <member name="M:FFImageLoading.Cross.MvxCachedImageView.#ctor(Android.Content.Context)">
            <summary>
            MvxCachedImageView by Daniel Luberda
            </summary>
        </member>
        <member name="M:FFImageLoading.Cross.MvxCachedImageView.SetupOnBeforeImageLoading(FFImageLoading.Work.TaskParameter)">
            <summary>
            Setups the on before image loading.
            You can add additional logic here to configure image loader settings before loading
            eg. custom cache keys, svg data resolvers, etc
            </summary>
            <param name="imageLoader">Image loader.</param>
        </member>
        <member name="P:FFImageLoading.Views.ImageViewAsync.ScaleToFit">
            <summary>
            Gets or sets a value if the image should be scale to fit in the available space keeping aspect ratio.
            <remarks>AdjustViewToBounds should be false and ScaleType should be matrix.</remarks>
            </summary>
        </member>
        <member name="P:FFImageLoading.Views.ImageViewAsync.AlignMode">
            <summary>
            Gets or sets a value if the image should be aligned to left and bottom in the available space.
            <remarks>AdjustViewToBounds should be false and ScaleType should be matrix.</remarks>
            </summary>
        </member>
        <member name="T:FFImageLoading.Drawables.SelfDisposingBitmapDrawable">
             <summary>
             A BitmapDrawable that uses reference counting to determine when internal resources
             should be freed (Disposed).
            
             On Android versions Honeycomb and higher the internal Bitmap is Dispose()d but not recycled.
             On all other Android versions the Bitmap is recycled then disposed.
             </summary>
        </member>
        <member name="E:FFImageLoading.Drawables.SelfDisposingBitmapDrawable.NoLongerDisplayed">
            <summary>
            Occurs when internal displayed reference count has reached 0.
            It is raised before the counts are rechecked, and thus before
            any resources have potentially been freed.
            </summary>
        </member>
        <member name="E:FFImageLoading.Drawables.SelfDisposingBitmapDrawable.Displayed">
            <summary>
            Occurs when internal displayed reference count goes from 0 to 1.
            Once the internal reference count is > 1 this event will not be raised
            on subsequent calls to SetIsDisplayed(bool).
            </summary>
        </member>
        <member name="M:FFImageLoading.Drawables.SelfDisposingBitmapDrawable.SetIsDisplayed(System.Boolean)">
            <summary>
            This should only be called by Views that are actually going to draw the drawable.
            Increments or decrements the internal displayed reference count.
            If the internal reference count becomes 0, NoLongerDisplayed will be raised.
            If the internal reference count becomes 1, Displayed will be raised.
            This method should be called from the main thread.
            </summary>
            <param name="isDisplayed">If set to <c>true</c> reference count is
            incremented, otherwise it is decremented.</param>
        </member>
        <member name="M:FFImageLoading.Drawables.SelfDisposingBitmapDrawable.SetIsCached(System.Boolean)">
             <summary>
             This should only be called by caching entities.
            
             Increments or decrements the cache reference count.
             This count represents if the instance is cached by something
             and should not free its resources when no longer displayed.
             </summary>
             <param name="isCached">If set to <c>true</c> is cached.</param>
        </member>
        <member name="M:FFImageLoading.Drawables.SelfDisposingBitmapDrawable.SetIsRetained(System.Boolean)">
             <summary>
             If you wish to use the instance beyond the lifecycle managed by the caching entity
             call this method with true. But be aware that you must also have the same number
             of calls with false or the instance and its resources will be leaked.
            
             Also be aware that once retained, the caching entity will not allow the internal
             Bitmap allocation to be reused. Retaining an instance does not guarantee it a place
             in the cache, it can be evicted at any time.
             </summary>
             <param name="isRetained">If set to <c>true</c> is retained.</param>
        </member>
        <member name="E:FFImageLoading.Drawables.ISelfDisposingBitmapDrawable.NoLongerDisplayed">
            <summary>
            Occurs when internal displayed reference count has reached 0.
            It is raised before the counts are rechecked, and thus before
            any resources have potentially been freed.
            </summary>
        </member>
        <member name="E:FFImageLoading.Drawables.ISelfDisposingBitmapDrawable.Displayed">
            <summary>
            Occurs when internal displayed reference count goes from 0 to 1.
            Once the internal reference count is > 1 this event will not be raised
            on subsequent calls to SetIsDisplayed(bool).
            </summary>
        </member>
        <member name="M:FFImageLoading.Drawables.ISelfDisposingBitmapDrawable.SetIsDisplayed(System.Boolean)">
             <summary>
             This should only be called by Views that are actually going to draw the drawable.
            
             Increments or decrements the internal displayed reference count.
             If the internal reference count becomes 0, NoLongerDisplayed will be raised.
             If the internal reference count becomes 1, Displayed will be raised.
             This method should be called from the main thread.
             </summary>
             <param name="isDisplayed">If set to <c>true</c> reference count is
             incremented, otherwise it is decremented.</param>
        </member>
        <member name="M:FFImageLoading.Drawables.ISelfDisposingBitmapDrawable.SetIsCached(System.Boolean)">
             <summary>
             This should only be called by caching entities.
            
             Increments or decrements the cache reference count.
             This count represents if the instance is cached by something
             and should not free its resources when no longer displayed.
             </summary>
             <param name="isCached">If set to <c>true</c> is cached.</param>
        </member>
        <member name="M:FFImageLoading.Drawables.ISelfDisposingBitmapDrawable.SetIsRetained(System.Boolean)">
             <summary>
             If you wish to use the instance beyond the lifecycle managed by the caching entity
             call this method with true. But be aware that you must also have the same number
             of calls with false or the instance and its resources will be leaked.
            
             Also be aware that once retained, the caching entity will not allow the internal
             Bitmap allocation to be reused. Retaining an instance does not guarantee it a place
             in the cache, it can be evicted at any time.
             </summary>
             <param name="isRetained">If set to <c>true</c> is retained.</param>
        </member>
        <member name="T:FFImageLoading.ImageService">
            <summary>
            FFImageLoading by Daniel Luberda
            </summary>
        </member>
        <member name="P:FFImageLoading.ImageService.Instance">
            <summary>
            FFImageLoading instance.
            </summary>
            <value>The instance.</value>
        </member>
        <member name="T:FFImageLoading.TaskParameterExtensions">
            <summary>
            TaskParameterExtensions
            </summary>
        </member>
        <member name="M:FFImageLoading.TaskParameterExtensions.InvalidateAsync(FFImageLoading.Work.TaskParameter,FFImageLoading.Cache.CacheType)">
            <summary>
            Invalidate the image corresponding to given parameters from given caches.
            </summary>
            <param name="parameters">Image parameters.</param>
            <param name="cacheType">Cache type.</param>
        </member>
        <member name="M:FFImageLoading.TaskParameterExtensions.Preload(FFImageLoading.Work.TaskParameter)">
            <summary>
            Preloads the image request into memory cache/disk cache for future use.
            </summary>
            <param name="parameters">Image parameters.</param>
        </member>
        <member name="M:FFImageLoading.TaskParameterExtensions.PreloadAsync(FFImageLoading.Work.TaskParameter)">
            <summary>
            Preloads the image request into memory cache/disk cache for future use.
            IMPORTANT: It throws image loading exceptions - you should handle them
            </summary>
            <param name="parameters">Image parameters.</param>
        </member>
        <member name="M:FFImageLoading.TaskParameterExtensions.DownloadOnly(FFImageLoading.Work.TaskParameter)">
            <summary>
            Downloads the image request into disk cache for future use if not already exists.
            Only Url Source supported.
            </summary>
            <param name="parameters">Image parameters.</param>
        </member>
        <member name="M:FFImageLoading.TaskParameterExtensions.DownloadOnlyAsync(FFImageLoading.Work.TaskParameter)">
            <summary>
            Downloads the image request into disk cache for future use if not already exists.
            Only Url Source supported.
            IMPORTANT: It throws image loading exceptions - you should handle them
            </summary>
            <param name="parameters">Image parameters.</param>
        </member>
        <member name="T:FFImageLoading.TaskParameterPlatformExtensions">
            <summary>
            TaskParameterPlatformExtensions
            </summary>
        </member>
        <member name="M:FFImageLoading.TaskParameterPlatformExtensions.AsPNGStreamAsync(FFImageLoading.Work.TaskParameter)">
            <summary>
            Loads the image into PNG Stream
            </summary>
            <returns>The PNG Stream async.</returns>
            <param name="parameters">Parameters.</param>
        </member>
        <member name="M:FFImageLoading.TaskParameterPlatformExtensions.AsJPGStreamAsync(FFImageLoading.Work.TaskParameter,System.Int32)">
            <summary>
            Loads the image into JPG Stream
            </summary>
            <returns>The JPG Stream async.</returns>
            <param name="parameters">Parameters.</param>
            <param name="quality">Quality.</param>
        </member>
        <member name="M:FFImageLoading.TaskParameterPlatformExtensions.Into(FFImageLoading.Work.TaskParameter,FFImageLoading.Views.ImageViewAsync)">
            <summary>
            Loads the image into given ImageViewAsync using defined parameters.
            </summary>
            <param name="parameters">Parameters for loading the image.</param>
            <param name="imageView">Image view that should receive the image.</param>
        </member>
        <member name="M:FFImageLoading.TaskParameterPlatformExtensions.IntoAsync(FFImageLoading.Work.TaskParameter,FFImageLoading.Views.ImageViewAsync)">
            <summary>
            Loads the image into given imageView using defined parameters.
            IMPORTANT: It throws image loading exceptions - you should handle them
            </summary>
            <returns>An awaitable Task.</returns>
            <param name="parameters">Parameters for loading the image.</param>
            <param name="imageView">Image view that should receive the image.</param>
        </member>
        <member name="M:FFImageLoading.TaskParameterPlatformExtensions.AsBitmapDrawableAsync(FFImageLoading.Work.TaskParameter)">
            <summary>
            Loads and gets BitmapDrawable using defined parameters.
            IMPORTANT: you should call SetNoLongerDisplayed method if drawable is no longer displayed
            IMPORTANT: It throws image loading exceptions - you should handle them
            </summary>
            <returns>The bitmap drawable async.</returns>
            <param name="parameters">Parameters.</param>
        </member>
        <member name="M:FFImageLoading.Decoders.BaseDecoder.CalculateInSampleSize(Android.Graphics.BitmapFactory.Options,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Calculate an inSampleSize for use in a {@link android.graphics.BitmapFactory.Options} object when decoding
            the closest inSampleSize that is a power of 2 and will result in the final decoded bitmap
            </summary>
            <param name="options"></param>
            <param name="reqWidth"></param>
            <param name="reqHeight"></param>
            <param name="allowUpscale"></param>
            <returns></returns>
        </member>
    </members>
</doc>
