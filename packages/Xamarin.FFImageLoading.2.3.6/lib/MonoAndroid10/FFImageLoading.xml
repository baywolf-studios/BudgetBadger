<?xml version="1.0"?>
<doc>
    <assembly>
        <name>FFImageLoading</name>
    </assembly>
    <members>
        <member name="M:FFImageLoading.Helpers.Exif.IndexedReader.GetFloat32(System.Int32)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:FFImageLoading.Helpers.Exif.IndexedReader.GetDouble64(System.Int32)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:FFImageLoading.Helpers.Exif.IndexedReader.GetString(System.Int32,System.Int32,System.Text.Encoding)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="T:FFImageLoading.Helpers.Exif.TiffDataFormat">
            <summary>An enumeration of data formats used by the TIFF specification.</summary>
            <author>Drew Noakes https://drewnoakes.com</author>
        </member>
        <member name="F:FFImageLoading.Helpers.Exif.ExifIfd0Directory.TagExifSubIfdOffset">
            <summary>This tag is a pointer to the Exif SubIFD.</summary>
        </member>
        <member name="F:FFImageLoading.Helpers.Exif.ExifIfd0Directory.TagGpsInfoOffset">
            <summary>This tag is a pointer to the Exif GPS IFD.</summary>
        </member>
        <member name="F:FFImageLoading.Helpers.Exif.ExifDirectoryBase.TagNewSubfileType">
            <summary>The new subfile type tag.</summary>
            <remarks>
            0 = Full-resolution Image
            1 = Reduced-resolution image
            2 = Single page of multi-page image
            3 = Single page of multi-page reduced-resolution image
            4 = Transparency mask
            5 = Transparency mask of reduced-resolution image
            6 = Transparency mask of multi-page image
            7 = Transparency mask of reduced-resolution multi-page image
            </remarks>
        </member>
        <member name="F:FFImageLoading.Helpers.Exif.ExifDirectoryBase.TagSubfileType">
            <summary>The old subfile type tag.</summary>
            <remarks>
            1 = Full-resolution image (Main image)
            2 = Reduced-resolution image (Thumbnail)
            3 = Single page of multi-page image
            </remarks>
        </member>
        <member name="F:FFImageLoading.Helpers.Exif.ExifDirectoryBase.TagBitsPerSample">
            <summary>
            When image format is no compression, this value shows the number of bits
            per component for each pixel.
            </summary>
            <remarks>
            Usually this value is '8,8,8'.
            </remarks>
        </member>
        <member name="F:FFImageLoading.Helpers.Exif.ExifDirectoryBase.TagPhotometricInterpretation">
            <summary>Shows the color space of the image data components.</summary>
            <remarks>
            0 = WhiteIsZero
            1 = BlackIsZero
            2 = RGB
            3 = RGB Palette
            4 = Transparency Mask
            5 = CMYK
            6 = YCbCr
            8 = CIELab
            9 = ICCLab
            10 = ITULab
            32803 = Color Filter Array
            32844 = Pixar LogL
            32845 = Pixar LogLuv
            34892 = Linear Raw
            </remarks>
        </member>
        <member name="F:FFImageLoading.Helpers.Exif.ExifDirectoryBase.TagThresholding">
            <summary>
            1 = No dithering or halftoning
            2 = Ordered dither or halftone
            3 = Randomized dither
            </summary>
        </member>
        <member name="F:FFImageLoading.Helpers.Exif.ExifDirectoryBase.TagFillOrder">
            <summary>
            1 = Normal
            2 = Reversed
            </summary>
        </member>
        <member name="F:FFImageLoading.Helpers.Exif.ExifDirectoryBase.TagStripOffsets">
            <summary>The position in the file of raster data.</summary>
        </member>
        <member name="F:FFImageLoading.Helpers.Exif.ExifDirectoryBase.TagSamplesPerPixel">
            <summary>Each pixel is composed of this many samples.</summary>
        </member>
        <member name="F:FFImageLoading.Helpers.Exif.ExifDirectoryBase.TagRowsPerStrip">
            <summary>The raster is codified by a single block of data holding this many rows.</summary>
        </member>
        <member name="F:FFImageLoading.Helpers.Exif.ExifDirectoryBase.TagStripByteCounts">
            <summary>The size of the raster data in bytes.</summary>
        </member>
        <member name="F:FFImageLoading.Helpers.Exif.ExifDirectoryBase.TagPlanarConfiguration">
            <summary>
            When image format is no compression YCbCr, this value shows byte aligns of YCbCr data.
            </summary>
            <remarks>
            If value is '1', Y/Cb/Cr value is chunky format, contiguous for
            each subsampling pixel. If value is '2', Y/Cb/Cr value is separated and
            stored to Y plane/Cb plane/Cr plane format.
            </remarks>
        </member>
        <member name="F:FFImageLoading.Helpers.Exif.ExifDirectoryBase.TagSubIfdOffset">
            <summary>Tag is a pointer to one or more sub-IFDs.</summary>
            <remarks>Seems to be used exclusively by raw formats, referencing one or two IFDs.</remarks>
        </member>
        <member name="F:FFImageLoading.Helpers.Exif.ExifDirectoryBase.TagCfaPattern2">
            <summary>There are two definitions for CFA pattern, I don't know the difference...</summary>
        </member>
        <member name="F:FFImageLoading.Helpers.Exif.ExifDirectoryBase.TagExposureTime">
            <summary>Exposure time (reciprocal of shutter speed).</summary>
            <remarks>Unit is second.</remarks>
        </member>
        <member name="F:FFImageLoading.Helpers.Exif.ExifDirectoryBase.TagFNumber">
            <summary>The actual F-number(F-stop) of lens when the image was taken.</summary>
        </member>
        <member name="F:FFImageLoading.Helpers.Exif.ExifDirectoryBase.TagExposureProgram">
            <summary>Exposure program that the camera used when image was taken.</summary>
            <remarks>
            '1' means
            manual control, '2' program normal, '3' aperture priority, '4' shutter
            priority, '5' program creative (slow program), '6' program action
            (high-speed program), '7' portrait mode, '8' landscape mode.
            </remarks>
        </member>
        <member name="F:FFImageLoading.Helpers.Exif.ExifDirectoryBase.TagOptoElectricConversionFunction">
            <summary>Indicates the Opto-Electric Conversion Function (OECF) specified in ISO 14524.</summary>
            <remarks>
            OECF is the relationship between the camera optical input and the image values.
            <para />
            The values are:
            <list type="bullet">
            <item>Two shorts, indicating respectively number of columns, and number of rows.</item>
            <item>For each column, the column name in a null-terminated ASCII string.</item>
            <item>For each cell, an SRATIONAL value.</item>
            </list>
            </remarks>
        </member>
        <member name="F:FFImageLoading.Helpers.Exif.ExifDirectoryBase.TagSensitivityType">
            <summary>Applies to ISO tag.</summary>
            <remarks>
            0 = Unknown
            1 = Standard Output Sensitivity
            2 = Recommended Exposure Index
            3 = ISO Speed
            4 = Standard Output Sensitivity and Recommended Exposure Index
            5 = Standard Output Sensitivity and ISO Speed
            6 = Recommended Exposure Index and ISO Speed
            7 = Standard Output Sensitivity, Recommended Exposure Index and ISO Speed
            </remarks>
        </member>
        <member name="F:FFImageLoading.Helpers.Exif.ExifDirectoryBase.TagTimeZoneOffset">
            <summary>Non-standard, but in use.</summary>
        </member>
        <member name="F:FFImageLoading.Helpers.Exif.ExifDirectoryBase.TagCompressedAverageBitsPerPixel">
            <summary>Average (rough estimate) compression level in JPEG bits per pixel.</summary>
        </member>
        <member name="F:FFImageLoading.Helpers.Exif.ExifDirectoryBase.TagShutterSpeed">
            <summary>Shutter speed by APEX value.</summary>
            <remarks>
            To convert this value to ordinary 'Shutter Speed';
            calculate this value's power of 2, then reciprocal. For example, if the
            ShutterSpeedValue is '4', shutter speed is 1/(24)=1/16 second.
            </remarks>
        </member>
        <member name="F:FFImageLoading.Helpers.Exif.ExifDirectoryBase.TagAperture">
            <summary>The actual aperture value of lens when the image was taken.</summary>
            <remarks>
            Unit is APEX.
            To convert this value to ordinary F-number (F-stop), calculate this value's
            power of root 2 (=1.4142). For example, if the ApertureValue is '5',
            F-number is 1.4142^5 = F5.6.
            </remarks>
        </member>
        <member name="F:FFImageLoading.Helpers.Exif.ExifDirectoryBase.TagMaxAperture">
            <summary>Maximum aperture value of lens.</summary>
            <remarks>
            You can convert to F-number by calculating
            power of root 2 (same process of ApertureValue:0x9202).
            The actual aperture value of lens when the image was taken. To convert this
            value to ordinary f-number(f-stop), calculate the value's power of root 2
            (=1.4142). For example, if the ApertureValue is '5', f-number is 1.41425^5 = F5.6.
            </remarks>
        </member>
        <member name="F:FFImageLoading.Helpers.Exif.ExifDirectoryBase.TagSubjectDistance">
            <summary>Indicates the distance the autofocus camera is focused to.</summary>
            <remarks>Tends to be less accurate as distance increases.</remarks>
        </member>
        <member name="F:FFImageLoading.Helpers.Exif.ExifDirectoryBase.TagMeteringMode">
            <summary>Exposure metering method.</summary>
            <remarks>
            '0' means unknown, '1' average, '2' center weighted average,
            '3' spot, '4' multi-spot, '5' multi-segment, '6' partial,
            '255' other.
            </remarks>
        </member>
        <member name="F:FFImageLoading.Helpers.Exif.ExifDirectoryBase.TagWhiteBalance">
            <summary>White balance (aka light source).</summary>
            <remarks>
            '0' means unknown, '1' daylight,
            '2' fluorescent, '3' tungsten, '10' flash, '17' standard light A,
            '18' standard light B, '19' standard light C, '20' D55, '21' D65,
            '22' D75, '255' other.
            </remarks>
        </member>
        <member name="F:FFImageLoading.Helpers.Exif.ExifDirectoryBase.TagFlash">
            <summary>
            0x0  = 0000000 = No Flash
            0x1  = 0000001 = Fired
            0x5  = 0000101 = Fired, Return not detected
            0x7  = 0000111 = Fired, Return detected
            0x9  = 0001001 = On
            0xd  = 0001101 = On, Return not detected
            0xf  = 0001111 = On, Return detected
            0x10 = 0010000 = Off
            0x18 = 0011000 = Auto, Did not fire
            0x19 = 0011001 = Auto, Fired
            0x1d = 0011101 = Auto, Fired, Return not detected
            0x1f = 0011111 = Auto, Fired, Return detected
            0x20 = 0100000 = No flash function
            0x41 = 1000001 = Fired, Red-eye reduction
            0x45 = 1000101 = Fired, Red-eye reduction, Return not detected
            0x47 = 1000111 = Fired, Red-eye reduction, Return detected
            0x49 = 1001001 = On, Red-eye reduction
            0x4d = 1001101 = On, Red-eye reduction, Return not detected
            0x4f = 1001111 = On, Red-eye reduction, Return detected
            0x59 = 1011001 = Auto, Fired, Red-eye reduction
            0x5d = 1011101 = Auto, Fired, Red-eye reduction, Return not detected
            0x5f = 1011111 = Auto, Fired, Red-eye reduction, Return detected
                   6543210 (positions)
            This is a bitmask.
            0 = flash fired
            1 = return detected
            2 = return able to be detected
            3 = unknown
            4 = auto used
            5 = unknown
            6 = red eye reduction used
            </summary>
        </member>
        <member name="F:FFImageLoading.Helpers.Exif.ExifDirectoryBase.TagFocalLength">
            <summary>Focal length of lens used to take image.</summary>
            <remarks>
            Unit is millimeter.
            Nice digital cameras actually save the focal length as a function of how far they are zoomed in.
            </remarks>
        </member>
        <member name="F:FFImageLoading.Helpers.Exif.ExifDirectoryBase.TagMakernote">
            <summary>This tag holds the Exif Makernote.</summary>
            <remarks>
            Makernotes are free to be in any format, though they are often IFDs.
            To determine the format, we consider the starting bytes of the makernote itself and sometimes the
            camera model and make.
            <para />
            The component count for this tag includes all of the bytes needed for the makernote.
            </remarks>
        </member>
        <member name="F:FFImageLoading.Helpers.Exif.ExifDirectoryBase.TagWinTitle">
            <summary>The image title, as used by Windows XP.</summary>
        </member>
        <member name="F:FFImageLoading.Helpers.Exif.ExifDirectoryBase.TagWinComment">
            <summary>The image comment, as used by Windows XP.</summary>
        </member>
        <member name="F:FFImageLoading.Helpers.Exif.ExifDirectoryBase.TagWinAuthor">
            <summary>The image author, as used by Windows XP (called Artist in the Windows shell).</summary>
        </member>
        <member name="F:FFImageLoading.Helpers.Exif.ExifDirectoryBase.TagWinKeywords">
            <summary>The image keywords, as used by Windows XP.</summary>
        </member>
        <member name="F:FFImageLoading.Helpers.Exif.ExifDirectoryBase.TagWinSubject">
            <summary>The image subject, as used by Windows XP.</summary>
        </member>
        <member name="F:FFImageLoading.Helpers.Exif.ExifDirectoryBase.TagColorSpace">
            <summary>Defines Color Space.</summary>
            <remarks>
            DCF image must use sRGB color space so value is
            always '1'. If the picture uses the other color space, value is
            '65535':Uncalibrated.
            </remarks>
        </member>
        <member name="F:FFImageLoading.Helpers.Exif.ExifDirectoryBase.TagFocalPlaneResolutionUnit">
            <summary>Unit of FocalPlaneXResolution/FocalPlaneYResolution.</summary>
            <remarks>
            '1' means no-unit, '2' inch, '3' centimeter.
            Note: Some of Fujifilm's digicam(e.g.FX2700,FX2900,Finepix4700Z/40i etc)
            uses value '3' so it must be 'centimeter', but it seems that they use a
            '8.3mm?'(1/3in.?) to their ResolutionUnit. Fuji's BUG? Finepix4900Z has
            been changed to use value '2' but it doesn't match to actual value also.
            </remarks>
        </member>
        <member name="F:FFImageLoading.Helpers.Exif.ExifDirectoryBase.TagCustomRendered">
            <summary>
            This tag indicates the use of special processing on image data, such as rendering
            geared to output.
            </summary>
            <remarks>
            When special processing is performed, the reader is expected to
            disable or minimize any further processing.
            Tag = 41985 (A401.H)
            Type = SHORT
            Count = 1
            Default = 0
            0 = Normal process
            1 = Custom process
            Other = reserved
            </remarks>
        </member>
        <member name="F:FFImageLoading.Helpers.Exif.ExifDirectoryBase.TagExposureMode">
            <summary>This tag indicates the exposure mode set when the image was shot.</summary>
            <remarks>
            In auto-bracketing mode, the camera shoots a series of frames of the
            same scene at different exposure settings.
            Tag = 41986 (A402.H)
            Type = SHORT
            Count = 1
            Default = none
            0 = Auto exposure
            1 = Manual exposure
            2 = Auto bracket
            Other = reserved
            </remarks>
        </member>
        <member name="F:FFImageLoading.Helpers.Exif.ExifDirectoryBase.TagWhiteBalanceMode">
            <summary>This tag indicates the white balance mode set when the image was shot.</summary>
            <remarks>
            Tag = 41987 (A403.H)
            Type = SHORT
            Count = 1
            Default = none
            0 = Auto white balance
            1 = Manual white balance
            Other = reserved
            </remarks>
        </member>
        <member name="F:FFImageLoading.Helpers.Exif.ExifDirectoryBase.TagDigitalZoomRatio">
            <summary>This tag indicates the digital zoom ratio when the image was shot.</summary>
            <remarks>
            If the numerator of the recorded value is 0, this indicates that digital zoom was
            not used.
            Tag = 41988 (A404.H)
            Type = RATIONAL
            Count = 1
            Default = none
            </remarks>
        </member>
        <member name="F:FFImageLoading.Helpers.Exif.ExifDirectoryBase.Tag35MMFilmEquivFocalLength">
            <summary>
            This tag indicates the equivalent focal length assuming a 35mm film camera, in mm.
            </summary>
            <remarks>
            A value of 0 means the focal length is unknown. Note that this tag
            differs from the FocalLength tag.
            Tag = 41989 (A405.H)
            Type = SHORT
            Count = 1
            Default = none
            </remarks>
        </member>
        <member name="F:FFImageLoading.Helpers.Exif.ExifDirectoryBase.TagSceneCaptureType">
            <summary>This tag indicates the type of scene that was shot.</summary>
            <remarks>
            It can also be used to
            record the mode in which the image was shot. Note that this differs from
            the scene type (SceneType) tag.
            Tag = 41990 (A406.H)
            Type = SHORT
            Count = 1
            Default = 0
            0 = Standard
            1 = Landscape
            2 = Portrait
            3 = Night scene
            Other = reserved
            </remarks>
        </member>
        <member name="F:FFImageLoading.Helpers.Exif.ExifDirectoryBase.TagGainControl">
            <summary>This tag indicates the degree of overall image gain adjustment.</summary>
            <remarks>
            Tag = 41991 (A407.H)
            Type = SHORT
            Count = 1
            Default = none
            0 = None
            1 = Low gain up
            2 = High gain up
            3 = Low gain down
            4 = High gain down
            Other = reserved
            </remarks>
        </member>
        <member name="F:FFImageLoading.Helpers.Exif.ExifDirectoryBase.TagContrast">
            <summary>
            This tag indicates the direction of contrast processing applied by the camera
            when the image was shot.
            </summary>
            <remarks>
            Tag = 41992 (A408.H)
            Type = SHORT
            Count = 1
            Default = 0
            0 = Normal
            1 = Soft
            2 = Hard
            Other = reserved
            </remarks>
        </member>
        <member name="F:FFImageLoading.Helpers.Exif.ExifDirectoryBase.TagSaturation">
            <summary>
            This tag indicates the direction of saturation processing applied by the camera
            when the image was shot.
            </summary>
            <remarks>
            Tag = 41993 (A409.H)
            Type = SHORT
            Count = 1
            Default = 0
            0 = Normal
            1 = Low saturation
            2 = High saturation
            Other = reserved
            </remarks>
        </member>
        <member name="F:FFImageLoading.Helpers.Exif.ExifDirectoryBase.TagSharpness">
            <summary>
            This tag indicates the direction of sharpness processing applied by the camera
            when the image was shot.
            </summary>
            <remarks>
            Tag = 41994 (A40A.H)
            Type = SHORT
            Count = 1
            Default = 0
            0 = Normal
            1 = Soft
            2 = Hard
            Other = reserved
            </remarks>
        </member>
        <member name="F:FFImageLoading.Helpers.Exif.ExifDirectoryBase.TagDeviceSettingDescription">
            <summary>
            This tag indicates information on the picture-taking conditions of a particular
            camera model.
            </summary>
            <remarks>
            The tag is used only to indicate the picture-taking conditions in the reader.
            Tag = 41995 (A40B.H)
            Type = UNDEFINED
            Count = Any
            Default = none
            The information is recorded in the format shown below. The data is recorded
            in Unicode using SHORT type for the number of display rows and columns and
            UNDEFINED type for the camera settings. The Unicode (UCS-2) string including
            Signature is NULL terminated. The specifics of the Unicode string are as given
            in ISO/IEC 10464-1.
            Length  Type        Meaning
            ------+-----------+------------------
            2       SHORT       Display columns
            2       SHORT       Display rows
            Any     UNDEFINED   Camera setting-1
            Any     UNDEFINED   Camera setting-2
            :       :           :
            Any     UNDEFINED   Camera setting-n
            </remarks>
        </member>
        <member name="F:FFImageLoading.Helpers.Exif.ExifDirectoryBase.TagSubjectDistanceRange">
            <summary>This tag indicates the distance to the subject.</summary>
            <remarks>
            Tag = 41996 (A40C.H)
            Type = SHORT
            Count = 1
            Default = none
            0 = unknown
            1 = Macro
            2 = Close view
            3 = Distant view
            Other = reserved
            </remarks>
        </member>
        <member name="F:FFImageLoading.Helpers.Exif.ExifDirectoryBase.TagImageUniqueId">
            <summary>This tag indicates an identifier assigned uniquely to each image.</summary>
            <remarks>
            It is recorded as an ASCII string equivalent to hexadecimal notation and 128-bit
            fixed length.
            Tag = 42016 (A420.H)
            Type = ASCII
            Count = 33
            Default = none
            </remarks>
        </member>
        <member name="F:FFImageLoading.Helpers.Exif.ExifDirectoryBase.TagCameraOwnerName">
            <summary>String.</summary>
        </member>
        <member name="F:FFImageLoading.Helpers.Exif.ExifDirectoryBase.TagBodySerialNumber">
            <summary>String.</summary>
        </member>
        <member name="F:FFImageLoading.Helpers.Exif.ExifDirectoryBase.TagLensSpecification">
            <summary>An array of four Rational64u numbers giving focal and aperture ranges.</summary>
        </member>
        <member name="F:FFImageLoading.Helpers.Exif.ExifDirectoryBase.TagLensMake">
            <summary>String.</summary>
        </member>
        <member name="F:FFImageLoading.Helpers.Exif.ExifDirectoryBase.TagLensModel">
            <summary>String.</summary>
        </member>
        <member name="F:FFImageLoading.Helpers.Exif.ExifDirectoryBase.TagLensSerialNumber">
            <summary>String.</summary>
        </member>
        <member name="F:FFImageLoading.Helpers.Exif.ExifDirectoryBase.TagGamma">
            <summary>Rational64u.</summary>
        </member>
        <member name="F:FFImageLoading.Helpers.Exif.ExifSubIfdDirectory.TagInteropOffset">
            <summary>This tag is a pointer to the Exif Interop IFD.</summary>
        </member>
        <member name="F:FFImageLoading.Helpers.Exif.JpegSegmentType.Tem">
            <summary>For temporary use in arithmetic coding.</summary>
            <remarks>No length or parameter sequence follows this marker.</remarks>
        </member>
        <member name="F:FFImageLoading.Helpers.Exif.JpegSegmentType.Soi">
            <summary>Start Of Image segment. Begins the compressed JPEG data stream.</summary>
            <remarks>No length or parameter sequence follows this marker.</remarks>
        </member>
        <member name="F:FFImageLoading.Helpers.Exif.JpegSegmentType.Dqt">
            <summary>Define Quantization Table.</summary>
            <remarks>Specifies one or more quantization tables.</remarks>
        </member>
        <member name="F:FFImageLoading.Helpers.Exif.JpegSegmentType.Sof0">
            <summary>Start-of-Frame, non-differential Huffman coding frame, baseline DCT.</summary>
            <remarks>
            Indicates that this is a baseline DCT-based JPEG, and specifies the width,
            height, number of components, and component subsampling (e.g., 4:2:0).
            </remarks>
        </member>
        <member name="F:FFImageLoading.Helpers.Exif.JpegSegmentType.Sof1">
            <summary>Start-of-Frame, non-differential Huffman coding frame, extended sequential DCT.</summary>
        </member>
        <member name="F:FFImageLoading.Helpers.Exif.JpegSegmentType.Sof2">
            <summary>Start-of-Frame, non-differential Huffman coding frame, progressive DCT.</summary>
            <remarks>
            Indicates that this is a progressive DCT-based JPEG, and specifies the width,
            height, number of components, and component subsampling (e.g., 4:2:0).
            </remarks>
        </member>
        <member name="F:FFImageLoading.Helpers.Exif.JpegSegmentType.Sof3">
            <summary>Start-of-Frame, non-differential Huffman coding frame, lossless sequential.</summary>
        </member>
        <member name="F:FFImageLoading.Helpers.Exif.JpegSegmentType.Dht">
            <summary>Define Huffman Table(s).</summary>
            <remarks>Specifies one or more Huffman tables.</remarks>
        </member>
        <member name="F:FFImageLoading.Helpers.Exif.JpegSegmentType.Sof5">
            <summary>Start-of-Frame, differential Huffman coding frame, differential sequential DCT.</summary>
        </member>
        <member name="F:FFImageLoading.Helpers.Exif.JpegSegmentType.Sof6">
            <summary>Start-of-Frame, differential Huffman coding frame, differential progressive DCT.</summary>
        </member>
        <member name="F:FFImageLoading.Helpers.Exif.JpegSegmentType.Sof7">
            <summary>Start-of-Frame, differential Huffman coding frame, differential lossless.</summary>
        </member>
        <member name="F:FFImageLoading.Helpers.Exif.JpegSegmentType.Sof9">
            <summary>Start-of-Frame, non-differential artihmetic coding frame, extended sequential DCT.</summary>
        </member>
        <member name="F:FFImageLoading.Helpers.Exif.JpegSegmentType.Sof10">
            <summary>Start-of-Frame, non-differential artihmetic coding frame, progressive DCT.</summary>
        </member>
        <member name="F:FFImageLoading.Helpers.Exif.JpegSegmentType.Sof11">
            <summary>Start-of-Frame, non-differential artihmetic coding frame, lossless sequential.</summary>
        </member>
        <member name="F:FFImageLoading.Helpers.Exif.JpegSegmentType.Dac">
            <summary>Define Arithmetic Coding table(s).</summary>
        </member>
        <member name="F:FFImageLoading.Helpers.Exif.JpegSegmentType.Sof13">
            <summary>Start-of-Frame, differential artihmetic coding frame, differential sequential DCT.</summary>
        </member>
        <member name="F:FFImageLoading.Helpers.Exif.JpegSegmentType.Sof14">
            <summary>Start-of-Frame, differential artihmetic coding frame, differential progressive DCT.</summary>
        </member>
        <member name="F:FFImageLoading.Helpers.Exif.JpegSegmentType.Sof15">
            <summary>Start-of-Frame, differential artihmetic coding frame, differential lossless.</summary>
        </member>
        <member name="F:FFImageLoading.Helpers.Exif.JpegSegmentType.Rst0">
            <summary>Restart.</summary>
            <remarks>No length or parameter sequence follows this marker.</remarks>
        </member>
        <member name="F:FFImageLoading.Helpers.Exif.JpegSegmentType.Rst1">
            <summary>Restart.</summary>
            <remarks>No length or parameter sequence follows this marker.</remarks>
        </member>
        <member name="F:FFImageLoading.Helpers.Exif.JpegSegmentType.Rst2">
            <summary>Restart.</summary>
            <remarks>No length or parameter sequence follows this marker.</remarks>
        </member>
        <member name="F:FFImageLoading.Helpers.Exif.JpegSegmentType.Rst3">
            <summary>Restart.</summary>
            <remarks>No length or parameter sequence follows this marker.</remarks>
        </member>
        <member name="F:FFImageLoading.Helpers.Exif.JpegSegmentType.Rst4">
            <summary>Restart.</summary>
            <remarks>No length or parameter sequence follows this marker.</remarks>
        </member>
        <member name="F:FFImageLoading.Helpers.Exif.JpegSegmentType.Rst5">
            <summary>Restart.</summary>
            <remarks>No length or parameter sequence follows this marker.</remarks>
        </member>
        <member name="F:FFImageLoading.Helpers.Exif.JpegSegmentType.Rst6">
            <summary>Restart.</summary>
            <remarks>No length or parameter sequence follows this marker.</remarks>
        </member>
        <member name="F:FFImageLoading.Helpers.Exif.JpegSegmentType.Rst7">
            <summary>Restart.</summary>
            <remarks>No length or parameter sequence follows this marker.</remarks>
        </member>
        <member name="F:FFImageLoading.Helpers.Exif.JpegSegmentType.Eoi">
            <summary>End-of-Image. Terminates the JPEG compressed data stream that started at <see cref="F:FFImageLoading.Helpers.Exif.JpegSegmentType.Soi"/>.</summary>
            <remarks>No length or parameter sequence follows this marker.</remarks>
        </member>
        <member name="F:FFImageLoading.Helpers.Exif.JpegSegmentType.Sos">
            <summary>Start-of-Scan.</summary>
            <remarks>
            Begins a top-to-bottom scan of the image.
            In baseline DCT JPEG images, there is generally a single scan.
            Progressive DCT JPEG images usually contain multiple scans.
            This marker specifies which slice of data it will contain, and is
            immediately followed by entropy-coded data.
            </remarks>
        </member>
        <member name="F:FFImageLoading.Helpers.Exif.JpegSegmentType.Dnl">
            <summary>Define Number of Lines.</summary>
        </member>
        <member name="F:FFImageLoading.Helpers.Exif.JpegSegmentType.Dri">
            <summary>Define Restart Interval.</summary>
            <remarks>
            Specifies the interval between RSTn markers, in macroblocks.
            This marker is followed by two bytes indicating the fixed size so
            it can be treated like any other variable size segment.
            </remarks>
        </member>
        <member name="F:FFImageLoading.Helpers.Exif.JpegSegmentType.Dhp">
            <summary>Define Hierarchical Progression.</summary>
        </member>
        <member name="F:FFImageLoading.Helpers.Exif.JpegSegmentType.Exp">
            <summary>Expand reference components.</summary>
        </member>
        <member name="F:FFImageLoading.Helpers.Exif.JpegSegmentType.App0">
            <summary>Application specific, type 0. Commonly contains JFIF, JFXX.</summary>
        </member>
        <member name="F:FFImageLoading.Helpers.Exif.JpegSegmentType.App1">
            <summary>Application specific, type 1. Commonly contains Exif. XMP data is also kept in here, though usually in a second instance.</summary>
        </member>
        <member name="F:FFImageLoading.Helpers.Exif.JpegSegmentType.App2">
            <summary>Application specific, type 2. Commonly contains ICC.</summary>
        </member>
        <member name="F:FFImageLoading.Helpers.Exif.JpegSegmentType.App3">
            <summary>Application specific, type 3.</summary>
        </member>
        <member name="F:FFImageLoading.Helpers.Exif.JpegSegmentType.App4">
            <summary>Application specific, type 4.</summary>
        </member>
        <member name="F:FFImageLoading.Helpers.Exif.JpegSegmentType.App5">
            <summary>Application specific, type 5.</summary>
        </member>
        <member name="F:FFImageLoading.Helpers.Exif.JpegSegmentType.App6">
            <summary>Application specific, type 6.</summary>
        </member>
        <member name="F:FFImageLoading.Helpers.Exif.JpegSegmentType.App7">
            <summary>Application specific, type 7.</summary>
        </member>
        <member name="F:FFImageLoading.Helpers.Exif.JpegSegmentType.App8">
            <summary>Application specific, type 8.</summary>
        </member>
        <member name="F:FFImageLoading.Helpers.Exif.JpegSegmentType.App9">
            <summary>Application specific, type 9.</summary>
        </member>
        <member name="F:FFImageLoading.Helpers.Exif.JpegSegmentType.AppA">
            <summary>Application specific, type A. Can contain Unicode comments, though <see cref="F:FFImageLoading.Helpers.Exif.JpegSegmentType.Com"/> is more commonly used for comments.</summary>
        </member>
        <member name="F:FFImageLoading.Helpers.Exif.JpegSegmentType.AppB">
            <summary>Application specific, type B.</summary>
        </member>
        <member name="F:FFImageLoading.Helpers.Exif.JpegSegmentType.AppC">
            <summary>Application specific, type C.</summary>
        </member>
        <member name="F:FFImageLoading.Helpers.Exif.JpegSegmentType.AppD">
            <summary>Application specific, type D. Commonly contains IPTC, Photoshop data.</summary>
        </member>
        <member name="F:FFImageLoading.Helpers.Exif.JpegSegmentType.AppE">
            <summary>Application specific, type E. Commonly contains Adobe data.</summary>
        </member>
        <member name="F:FFImageLoading.Helpers.Exif.JpegSegmentType.AppF">
            <summary>Application specific, type F.</summary>
        </member>
        <member name="F:FFImageLoading.Helpers.Exif.JpegSegmentType.Com">
            <summary>JPEG comment (text).</summary>
        </member>
        <member name="M:FFImageLoading.Work.TaskParameter.FromFile(System.String)">
            <summary>
            Constructs a new TaskParameter to load an image from a file.
            </summary>
            <returns>The new TaskParameter.</returns>
            <param name="filepath">Path to the file.</param>
        </member>
        <member name="M:FFImageLoading.Work.TaskParameter.FromEmbeddedResource(System.String)">
            <summary>
            Constructs a new TaskParameter to load an image from a file.
            </summary>
            <returns>The new TaskParameter.</returns>
            <param name="resourceUri">Uri to the resource.</param>
        </member>
        <member name="M:FFImageLoading.Work.TaskParameter.FromUrl(System.String,System.Nullable{System.TimeSpan})">
            <summary>
            Constructs a new TaskParameter to load an image from a URL.
            </summary>
            <returns>The new TaskParameter.</returns>
            <param name="url">URL to the file</param>
            <param name="cacheDuration">How long the file will be cached on disk</param>
        </member>
        <member name="M:FFImageLoading.Work.TaskParameter.FromApplicationBundle(System.String)">
            <summary>
            Constructsa new TaskParameter to load an image from a file from application bundle.
            </summary>
            <param name="filepath">Path to the file.</param>
            <returns>The new TaskParameter.</returns>
        </member>
        <member name="M:FFImageLoading.Work.TaskParameter.FromCompiledResource(System.String)">
            <summary>
            Constructs a new TaskParameter to load an image from a compiled drawable resource.
            </summary>
            <returns>The new TaskParameter.</returns>
            <param name="resourceName">Name of the resource in drawable folder without extension</param>
        </member>
        <member name="M:FFImageLoading.Work.TaskParameter.FromStream(System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task{System.IO.Stream}})">
            <summary>
            Constructs a new TaskParameter to load an image from a stream
            </summary>
            <returns>The new TaskParameter.</returns>
            <param name="stream">Stream.</param>
        </member>
        <member name="M:FFImageLoading.Work.TaskParameter.FromString(System.String,FFImageLoading.Work.DataEncodingType)">
            <summary>
            Constructs a new TaskParameter to load an image from a string.
            </summary>
            <returns>The string.</returns>
            <param name="data">Data.</param>
            <param name="encoding">Data encoding.</param>
        </member>
        <member name="M:FFImageLoading.Work.TaskParameter.InvalidateLayout(System.Boolean)">
            <summary>
            Specifies if view layout should be invalidated after image is loaded
            </summary>
            <returns>The layout.</returns>
            <param name="enabled">If set to <c>true</c> enabled.</param>
        </member>
        <member name="M:FFImageLoading.Work.TaskParameter.Transform(FFImageLoading.Work.ITransformation)">
            <summary>
            Sets transformation for image loading task
            </summary>
            <returns>The TaskParameter instance for chaining the call.</returns>
            <param name="transformation">Transformation.</param>
        </member>
        <member name="M:FFImageLoading.Work.TaskParameter.Transform(System.Collections.Generic.IEnumerable{FFImageLoading.Work.ITransformation})">
            <summary>
            Sets transformations for image loading task
            </summary>
            <returns>The TaskParameter instance for chaining the call.</returns>
            <param name="transformations">Transformations.</param>
        </member>
        <member name="M:FFImageLoading.Work.TaskParameter.LoadingPlaceholder(System.String,FFImageLoading.Work.ImageSource)">
            <summary>
            Defines the placeholder used while loading.
            </summary>
            <returns>The TaskParameter instance for chaining the call.</returns>
            <param name="path">Path to the file.</param>
            <param name="source">Source for the path: local, web, assets</param>
        </member>
        <member name="M:FFImageLoading.Work.TaskParameter.ErrorPlaceholder(System.String,FFImageLoading.Work.ImageSource)">
            <summary>
            Defines the placeholder used when an error occurs.
            </summary>
            <returns>The TaskParameter instance for chaining the call.</returns>
            <param name="filepath">Path to the file.</param>
            <param name="source">Source for the path: local, web, assets</param>
        </member>
        <member name="M:FFImageLoading.Work.TaskParameter.DownSample(System.Int32,System.Int32,System.Nullable{System.Boolean})">
            <summary>
            Reduce memory usage by downsampling the image. Aspect ratio will be kept even if width/height values are incorrect.
            Uses pixels units for width/height
            </summary>
            <returns>The TaskParameter instance for chaining the call.</returns>
            <param name="width">Optional width parameter, if value is higher than zero it will try to downsample to this width while keeping aspect ratio.</param>
            <param name="height">Optional height parameter, if value is higher than zero it will try to downsample to this height while keeping aspect ratio.</param>
            <param name="allowUpscale">Whether to upscale the image if it is smaller than passed dimensions or not; if <c>null</c> the value is taken from Configuration (<c>false</c> by default)</param>
        </member>
        <member name="M:FFImageLoading.Work.TaskParameter.DownSampleInDip(System.Int32,System.Int32,System.Nullable{System.Boolean})">
            <summary>
            Reduce memory usage by downsampling the image. Aspect ratio will be kept even if width/height values are incorrect.
            Uses device independent points units for width/height
            </summary>
            <returns>The TaskParameter instance for chaining the call.</returns>
            <param name="width">Optional width parameter, if value is higher than zero it will try to downsample to this width while keeping aspect ratio.</param>
            <param name="height">Optional height parameter, if value is higher than zero it will try to downsample to this height while keeping aspect ratio.</param>
            <param name="allowUpscale">Whether to upscale the image if it is smaller than passed dimensions or not; if <c>null</c> the value is taken from Configuration (<c>false</c> by default)</param>
        </member>
        <member name="M:FFImageLoading.Work.TaskParameter.DownSampleMode(FFImageLoading.Work.InterpolationMode)">
            <summary>
            Set mode for downsampling. Speed-wise: nearest neighbour > linear > cubic.\
            Default: bilinear
            On Android it's always ignored as Android uses bitmap insamplesize downsampling (bilinear)
            </summary>
            <returns>The TaskParameter instance for chaining the call.</returns>
            <param name="mode">Optional mode parameter, if not set, defaults to linear.</param>
        </member>
        <member name="M:FFImageLoading.Work.TaskParameter.WithPriority(FFImageLoading.Work.LoadingPriority)">
            <summary>
            Defines the loading priority, the default is LoadingPriority.Normal
            </summary>
            <returns>The TaskParameter instance for chaining the call.</returns>
            <param name="priority">Priority.</param>
        </member>
        <member name="M:FFImageLoading.Work.TaskParameter.WithCustomDataResolver(FFImageLoading.Work.IDataResolver)">
            <summary>
            Forces task to use custom resolver.
            </summary>
            <returns>The TaskParameter instance for chaining the call.</returns>
            <param name="resolver">Resolver.</param>
        </member>
        <member name="M:FFImageLoading.Work.TaskParameter.WithCustomLoadingPlaceholderDataResolver(FFImageLoading.Work.IDataResolver)">
            <summary>
            Forces task to use custom resolver for loading placeholder.
            </summary>
            <returns>The TaskParameter instance for chaining the call.</returns>
            <param name="resolver">Resolver.</param>
        </member>
        <member name="M:FFImageLoading.Work.TaskParameter.WithCustomErrorPlaceholderDataResolver(FFImageLoading.Work.IDataResolver)">
            <summary>
            Forces task to use custom resolver for error placeholder.
            </summary>
            <returns>The TaskParameter instance for chaining the call.</returns>
            <param name="resolver">Resolver.</param>
        </member>
        <member name="M:FFImageLoading.Work.TaskParameter.WithPriority(System.Int32)">
            <summary>
            Defines the loading priority, the default is 0 (LoadingPriority.Normal)
            </summary>
            <returns>The TaskParameter instance for chaining the call.</returns>
            <param name="priority">Priority.</param>
        </member>
        <member name="M:FFImageLoading.Work.TaskParameter.WithCache(FFImageLoading.Cache.CacheType)">
            <summary>
            Select cache types used for image loading task.
            </summary>
            <returns>The TaskParameter instance for chaining the call.</returns>
            <param name="cacheType">Cache type.</param>
        </member>
        <member name="M:FFImageLoading.Work.TaskParameter.BitmapOptimizations(System.Boolean)">
            <summary>
            Enables / disables bitmap optimizations
            </summary>
            <returns>The TaskParameter instance for chaining the call.</returns>
            <param name="enabled">If set to <c>true</c> enabled.</param>
        </member>
        <member name="M:FFImageLoading.Work.TaskParameter.FadeAnimation(System.Boolean,System.Nullable{System.Boolean},System.Nullable{System.Int32})">
            <summary>
            Indicates if the fade animation should be enabled.
            </summary>
            <returns>The TaskParameter instance for chaining the call.</returns>
            <param name="enabled">If set to <c>true</c> enabled.</param>
            <param name = "enabledForCachedImages">Enables animation for local or cached images</param>
            <param name = "duration">Fade animation duration in ms</param>
        </member>
        <member name="M:FFImageLoading.Work.TaskParameter.TransformPlaceholders(System.Boolean)">
            <summary>
            Indicates if transforms should be applied to placeholders.
            </summary>
            <returns>The TaskParameter instance for chaining the call.</returns>
            <param name="enabled">If set to <c>true</c> enabled.</param>
        </member>
        <member name="M:FFImageLoading.Work.TaskParameter.Retry(System.Int32,System.Int32)">
            <summary>
            If image loading fails automatically retry it a number of times, with a specific delay.
            </summary>
            <returns>The TaskParameter instance for chaining the call.</returns>
            <param name="retryCount">Number of retries</param>
            <param name="millisecondDelay">Delay in milliseconds between each trial</param>
        </member>
        <member name="M:FFImageLoading.Work.TaskParameter.CacheKey(System.String)">
            <summary>
            Uses this cache key, in addition with the real key, to cache into memory/disk
            </summary>
            <returns>The TaskParameter instance for chaining the call.</returns>
            <param name="customCacheKey">Custom cache key.</param>
        </member>
        <member name="M:FFImageLoading.Work.TaskParameter.Delay(System.Int32)">
            <summary>
            Delay the task by the specified milliseconds.
            </summary>
            <returns>The TaskParameter instance for chaining the call.</returns>
            <param name="milliseconds">Milliseconds to wait prior to start the task.</param>
        </member>
        <member name="M:FFImageLoading.Work.TaskParameter.Success(System.Action)">
            <summary>
            If image loading succeded this callback is called
            </summary>
            <returns>The TaskParameter instance for chaining the call.</returns>
            <param name="action">Action to invoke when loading succeded.</param>
        </member>
        <member name="M:FFImageLoading.Work.TaskParameter.Success(System.Action{FFImageLoading.Work.ImageInformation,FFImageLoading.Work.LoadingResult})">
            <summary>
            If image loading succeded this callback is called
            </summary>
            <returns>The TaskParameter instance for chaining the call.</returns>
            <param name="action">Action to invoke when loading succeded. Argument is the size of the image loaded.</param>
        </member>
        <member name="M:FFImageLoading.Work.TaskParameter.Error(System.Action{System.Exception})">
            <summary>
            If image loading failed this callback is called
            </summary>
            <returns>The TaskParameter instance for chaining the call.</returns>
            <param name="action">Action to invoke when loading failed</param>
        </member>
        <member name="M:FFImageLoading.Work.TaskParameter.Finish(System.Action{FFImageLoading.Work.IScheduledWork})">
            <summary>
            If image loading process finished, whatever the result, this callback is called
            </summary>
            <returns>The TaskParameter instance for chaining the call.</returns>
            <param name="action">Action to invoke when process is done</param>
        </member>
        <member name="M:FFImageLoading.Work.TaskParameter.DownloadStarted(System.Action{FFImageLoading.DownloadInformation})">
            <summary>
            If image starts downloading from Internet this callback is called
            </summary>
            <returns>The TaskParameter instance for chaining the call.</returns>
            <param name="action">Action.</param>
        </member>
        <member name="M:FFImageLoading.Work.TaskParameter.DownloadProgress(System.Action{FFImageLoading.DownloadProgress})">
            <summary>
            This callback can be used for reading download progress
            </summary>
            <returns>The TaskParameter instance for chaining the call.</returns>
            <param name="action">Action.</param>
        </member>
        <member name="M:FFImageLoading.Work.TaskParameter.FileWriteFinished(System.Action{FFImageLoading.FileWriteInfo})">
            <summary>
            Called after file is succesfully written to the disk
            </summary>
            <returns>The TaskParameter instance for chaining the call.</returns>
            <param name="action">Action.</param>
        </member>
        <member name="M:FFImageLoading.Work.TaskParameter.LoadingPlaceholderSet(System.Action)">
            <summary>
            Called after loading placeholder is set
            </summary>
            <returns>The TaskParameter instance for chaining the call.</returns>
            <param name="action">Action.</param>
        </member>
        <member name="M:FFImageLoading.Work.TaskParameter.Dispose">
            <summary>
            Releases all resource used by the <see cref="T:FFImageLoading.Work.TaskParameter"/> object.
            </summary>
            <remarks>Call <see cref="M:FFImageLoading.Work.TaskParameter.Dispose"/> when you are finished using the
            <see cref="T:FFImageLoading.Work.TaskParameter"/>. The <see cref="M:FFImageLoading.Work.TaskParameter.Dispose"/> method leaves the
            <see cref="T:FFImageLoading.Work.TaskParameter"/> in an unusable state. After calling <see cref="M:FFImageLoading.Work.TaskParameter.Dispose"/>,
            you must release all references to the <see cref="T:FFImageLoading.Work.TaskParameter"/> so the garbage
            collector can reclaim the memory that the <see cref="T:FFImageLoading.Work.TaskParameter"/> was occupying.</remarks>
        </member>
        <member name="M:FFImageLoading.Work.IWorkScheduler.Cancel(System.Func{FFImageLoading.Work.IImageLoaderTask,System.Boolean})">
            <summary>
            Cancels tasks that match predicate.
            </summary>
            <param name="predicate">Predicate for finding relevant tasks to cancel.</param>
        </member>
        <member name="M:FFImageLoading.Work.IWorkScheduler.LoadImage(FFImageLoading.Work.IImageLoaderTask)">
            <summary>
            Schedules the image loading. If image is found in cache then it returns it, otherwise it loads it.
            </summary>
            <param name="task">Image loading task.</param>
        </member>
        <member name="T:FFImageLoading.Config.Configuration">
            <summary>
            Configuration.
            </summary>
        </member>
        <member name="P:FFImageLoading.Config.Configuration.HttpClient">
            <summary>
            Gets or sets the http client used for web requests.
            </summary>
            <value>The http client used for web requests.</value>
        </member>
        <member name="P:FFImageLoading.Config.Configuration.Scheduler">
            <summary>
            Gets or sets the scheduler used to organize/schedule image loading tasks.
            </summary>
            <value>The scheduler used to organize/schedule image loading tasks.</value>
        </member>
        <member name="P:FFImageLoading.Config.Configuration.Logger">
            <summary>
            Gets or sets the logger used to receive debug/error messages.
            </summary>
            <value>The logger.</value>
        </member>
        <member name="P:FFImageLoading.Config.Configuration.DiskCache">
            <summary>
            Gets or sets the disk cache.
            </summary>
            <value>The disk cache.</value>
        </member>
        <member name="P:FFImageLoading.Config.Configuration.DiskCachePath">
            <summary>
            Gets or sets the disk cache path.
            </summary>
            <value>The disk cache path.</value>
        </member>
        <member name="P:FFImageLoading.Config.Configuration.DownloadCache">
            <summary>
            Gets or sets the download cache. Download cache is responsible for retrieving data from the web, or taking from the disk cache.
            </summary>
            <value>The download cache.</value>
        </member>
        <member name="P:FFImageLoading.Config.Configuration.DataResolverFactory">
            <summary>
            Gets or sets the image data resolver factory.
            </summary>
            <value>The data resolver factory.</value>
        </member>
        <member name="P:FFImageLoading.Config.Configuration.MD5Helper">
            <summary>
            Gets or sets the MD5 helper.
            </summary>
            <value>The MD5 helper.</value>
        </member>
        <member name="P:FFImageLoading.Config.Configuration.MainThreadDispatcher">
            <summary>
            Gets or sets the main thread dispatcher.
            </summary>
            <value>The main thread dispatcher.</value>
        </member>
        <member name="P:FFImageLoading.Config.Configuration.BitmapOptimizations">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:FFImageLoading.Config.Configuration"/> bitmap
            memory optimizations.
            </summary>
            <value><c>true</c> if bitmap memory optimizations; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:FFImageLoading.Config.Configuration.StreamChecksumsAsKeys">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:FFImageLoading.Config.Configuration"/> stream
            checksums as keys.
            </summary>
            <value><c>true</c> if stream checksums as keys; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:FFImageLoading.Config.Configuration.FadeAnimationEnabled">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:FFImageLoading.Config.Configuration"/> fade animation enabled.
            </summary>
            <value><c>true</c> if fade animation enabled; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:FFImageLoading.Config.Configuration.FadeAnimationForCachedImages">
            <summary>
            Gets or sets a value indicating wheter fade animation for
            cached or local images should be enabled.
            </summary>
            <value><c>true</c> if fade animation for cached or local images; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:FFImageLoading.Config.Configuration.FadeAnimationDuration">
            <summary>
            Gets or sets the default duration of the fade animation in ms.
            </summary>
            <value>The duration of the fade animation.</value>
        </member>
        <member name="P:FFImageLoading.Config.Configuration.TransformPlaceholders">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:FFImageLoading.Config.Configuration"/> transforming place is enabled.
            </summary>
            <value><c>true</c> if transform should be applied to placeholder images; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:FFImageLoading.Config.Configuration.DownsampleInterpolationMode">
            <summary>
            Gets or sets default downsample interpolation mode.
            </summary>
            <value>downsample interpolation mode</value>
        </member>
        <member name="P:FFImageLoading.Config.Configuration.AllowUpscale">
            <summary>
            Gets or sets a value that determines whether upscaling should be used in <see cref="M:FFImageLoading.Work.TaskParameter.DownSample(System.Int32,System.Int32,System.Nullable{System.Boolean})"/>/<see cref="M:FFImageLoading.Work.TaskParameter.DownSampleInDip(System.Int32,System.Int32,System.Nullable{System.Boolean})"/> functions if the image is smaller than passed dimensions
            </summary>
            <value><c>true</c> if upscaling is allowed; otherwise, <c>false</c></value>
        </member>
        <member name="P:FFImageLoading.Config.Configuration.HttpHeadersTimeout">
            <summary>
            Gets or sets the maximum time in seconds to wait to receive HTTP headers before the HTTP request is cancelled.
            </summary>
            <value>The http connect timeout.</value>
        </member>
        <member name="P:FFImageLoading.Config.Configuration.HttpReadTimeout">
            <summary>
            Gets or sets the maximum time in seconds to wait before the HTTP request is cancelled.
            </summary>
            <value>The http read timeout.</value>
        </member>
        <member name="P:FFImageLoading.Config.Configuration.HttpReadBufferSize">
            <summary>
            Gets or sets the size of the http read buffer.
            </summary>
            <value>The size of the http read buffer.</value>
        </member>
        <member name="P:FFImageLoading.Config.Configuration.MaxMemoryCacheSize">
            <summary>
            Gets or sets the maximum size of the memory cache in bytes.
            </summary>
            <value>The maximum size of the memory cache in bytes.</value>
        </member>
        <member name="P:FFImageLoading.Config.Configuration.DelayInMs">
            <summary>
            Milliseconds to wait prior to start any task.
            </summary>
        </member>
        <member name="P:FFImageLoading.Config.Configuration.VerbosePerformanceLogging">
            <summary>
            Enables / disables verbose performance logging.
            WARNING! It will downgrade image loading performance, disable it for release builds!
            </summary>
            <value>The verbose performance logging.</value>
        </member>
        <member name="P:FFImageLoading.Config.Configuration.VerboseMemoryCacheLogging">
            <summary>
            Enables / disables verbose memory cache logging.
            WARNING! It will downgrade image loading performance, disable it for release builds!
            </summary>
            <value>The verbose memory cache logging.</value>
        </member>
        <member name="P:FFImageLoading.Config.Configuration.VerboseLoadingCancelledLogging">
            <summary>
            Enables / disables verbose image loading cancelled logging.
            WARNING! It will downgrade image loading performance, disable it for release builds!
            </summary>
            <value>The verbose image loading cancelled logging.</value>
        </member>
        <member name="P:FFImageLoading.Config.Configuration.VerboseLogging">
            <summary>
            Enables / disables  verbose logging.
            IMPORTANT! If it's disabled are other verbose logging options are disabled too
            </summary>
            <value>The verbose logging.</value>
        </member>
        <member name="P:FFImageLoading.Config.Configuration.SchedulerMaxParallelTasks">
            <summary>
            Gets or sets the scheduler max parallel tasks.
            Default is: Math.Max(2, (int)(Environment.ProcessorCount / 2d))
            </summary>
            <value>The scheduler max parallel tasks.</value>
        </member>
        <member name="P:FFImageLoading.Config.Configuration.SchedulerMaxParallelTasksFactory">
            <summary>
            Gets or sets the scheduler max parallel tasks factory.
            If null SchedulerMaxParallelTasks property is used
            </summary>
            <value>The scheduler max parallel tasks factory.</value>
        </member>
        <member name="P:FFImageLoading.Config.Configuration.DiskCacheDuration">
            <summary>
            Gets or sets the default duration of the disk cache entries.
            </summary>
            <value>The duration of the cache.</value>
        </member>
        <member name="P:FFImageLoading.Config.Configuration.TryToReadDiskCacheDurationFromHttpHeaders">
            <summary>
            Gets or sets a value indicating whether try to read
            disk cache duration from http headers .
            </summary>
            <value><c>true</c> if try to read disk cache duration from http headers; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:FFImageLoading.Config.Configuration.ExecuteCallbacksOnUIThread">
            <summary>
            Gets or sets a value indicating whether callbacs (OnFinish, OnSuccess, etc)
            should execute on UI thread
            </summary>
            <value><c>true</c> if execute callbacks on UIT hread; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:FFImageLoading.Config.Configuration.AnimateGifs">
            <summary>
            Gets or sets a value indicating whether image loader should animate gifs.
            </summary>
            <value><c>true</c> if animate gifs; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:FFImageLoading.Config.Configuration.ClearMemoryCacheOnOutOfMemory">
            <summary>
            Gets or sets a value indicating whether clear
            memory cache on out of memory.
            </summary>
            <value><c>true</c> if clear memory cache on out of memory; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:FFImageLoading.Config.Configuration.InvalidateLayout">
            <summary>
            Specifies if view layout should be invalidated after image is loaded
            </summary>
            <value><c>true</c> if invalidate layout; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:FFImageLoading.Cache.IDiskCache.AddToSavingQueueIfNotExistsAsync(System.String,System.Byte[],System.TimeSpan,System.Action)">
            <summary>
            Adds the file to cache and file saving queue if it does not exists.
            </summary>
            <param name="key">Key to store/retrieve the file.</param>
            <param name="bytes">File data in bytes.</param>
            <param name="duration">Specifies how long an item should remain in the cache.</param>
            <param name="writeFinished">Action when write finishes.</param>
        </member>
        <member name="T:FFImageLoading.IImageService">
            <summary>
            FFImageLoading by Daniel Luberda
            </summary>
        </member>
        <member name="P:FFImageLoading.IImageService.Config">
            <summary>
            Gets FFImageLoading configuration
            </summary>
            <value>The configuration used by FFImageLoading.</value>
        </member>
        <member name="M:FFImageLoading.IImageService.Initialize">
            <summary>
            Initializes FFImageLoading with a default Configuration.
            Also forces to run disk cache cleaning routines (avoiding delay for first image loading tasks)
            </summary>
        </member>
        <member name="M:FFImageLoading.IImageService.Initialize(FFImageLoading.Config.Configuration)">
            <summary>
            Initializes FFImageLoading with a given Configuration. It allows to configure and override most of it.
            Also forces to run disk cache cleaning routines (avoiding delay for first image loading tasks)
            </summary>
            <param name="configuration">Configuration.</param>
        </member>
        <member name="M:FFImageLoading.IImageService.LoadFile(System.String)">
            <summary>
            Constructs a new TaskParameter to load an image from a file.
            </summary>
            <returns>The new TaskParameter.</returns>
            <param name="filepath">Path to the file.</param>
        </member>
        <member name="M:FFImageLoading.IImageService.LoadUrl(System.String,System.Nullable{System.TimeSpan})">
            <summary>
            Constructs a new TaskParameter to load an image from a URL.
            </summary>
            <returns>The new TaskParameter.</returns>
            <param name="url">URL to the file</param>
            <param name="cacheDuration">How long the file will be cached on disk</param>
        </member>
        <member name="M:FFImageLoading.IImageService.LoadString(System.String,FFImageLoading.Work.DataEncodingType)">
            <summary>
            Loads the string.
            </summary>
            <returns>The string.</returns>
            <param name="data">Data.</param>
            <param name="encoding">Encoding.</param>
        </member>
        <member name="M:FFImageLoading.IImageService.LoadBase64String(System.String)">
            <summary>
            Loads the base64 string.
            </summary>
            <returns>The base64 string.</returns>
            <param name="data">Data.</param>
        </member>
        <member name="M:FFImageLoading.IImageService.LoadFileFromApplicationBundle(System.String)">
            <summary>
            Constructs a new TaskParameter to load an image from a file from application bundle.
            </summary>
            <returns>The new TaskParameter.</returns>
            <param name="filepath">Path to the file.</param>
        </member>
        <member name="M:FFImageLoading.IImageService.LoadCompiledResource(System.String)">
            <summary>
            Constructs a new TaskParameter to load an image from a compiled drawable resource.
            </summary>
            <returns>The new TaskParameter.</returns>
            <param name="resourceName">Name of the resource in drawable folder without extension</param>
        </member>
        <member name="M:FFImageLoading.IImageService.LoadEmbeddedResource(System.String)">
            <summary>
            Constructs a new TaskParameter to load an image from a compiled drawable resource.
            eg. resource://YourProject.Resource.Resource.png
            eg. resource://YourProject.Resource.Resource.png?assembly=[FULL_ASSEMBLY_NAME]
            </summary>
            <returns>The new TaskParameter.</returns>
            <param name="resourceUri">Uri of the resource</param>
        </member>
        <member name="M:FFImageLoading.IImageService.LoadStream(System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task{System.IO.Stream}})">
            <summary>
            Constructs a new TaskParameter to load an image from a Stream.
            </summary>
            <returns>The new TaskParameter.</returns>
            <param name="stream">Stream.</param>
        </member>
        <member name="P:FFImageLoading.IImageService.ExitTasksEarly">
            <summary>
            Gets a value indicating whether ImageService will exit tasks earlier
            </summary>
            <value><c>true</c> if it should exit tasks early; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:FFImageLoading.IImageService.SetExitTasksEarly(System.Boolean)">
            <summary>
            Sets a value indicating whether ImageService will exit tasks earlier
            </summary>
            <param name="exitTasksEarly">If set to <c>true</c> exit tasks early.</param>
        </member>
        <member name="P:FFImageLoading.IImageService.PauseWork">
            <summary>
            Gets a value indicating whether ImageService will pause tasks execution
            </summary>
            <value><c>true</c> if pause work; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:FFImageLoading.IImageService.SetPauseWork(System.Boolean)">
            <summary>
            Sets a value indicating if all loading work should be paused (silently canceled).
            </summary>
            <param name="pauseWork">If set to <c>true</c> pause/cancel work.</param>
        </member>
        <member name="M:FFImageLoading.IImageService.CancelWorkFor(FFImageLoading.Work.IImageLoaderTask)">
            <summary>
            Cancel any loading work for the given task
            </summary>
            <param name="task">Image loading task to cancel.</param>
        </member>
        <member name="M:FFImageLoading.IImageService.CancelWorkForView(System.Object)">
            <summary>
            Cancel any loading work for the given view
            </summary>
            <param name="view">Image loading task to cancel.</param>
        </member>
        <member name="M:FFImageLoading.IImageService.RemovePendingTask(FFImageLoading.Work.IImageLoaderTask)">
            <summary>
            Removes a pending image loading task from the work queue.
            </summary>
            <param name="task">Image loading task to remove.</param>
        </member>
        <member name="M:FFImageLoading.IImageService.LoadImage(FFImageLoading.Work.IImageLoaderTask)">
            <summary>
            Queue an image loading task.
            </summary>
            <param name="task">Image loading task.</param>
        </member>
        <member name="M:FFImageLoading.IImageService.InvalidateCacheAsync(FFImageLoading.Cache.CacheType)">
            <summary>
            Invalidates selected caches.
            </summary>
            <returns>An awaitable task.</returns>
            <param name="cacheType">Memory cache, Disk cache or both</param>
        </member>
        <member name="M:FFImageLoading.IImageService.InvalidateMemoryCache">
            <summary>
            Invalidates the memory cache.
            </summary>
        </member>
        <member name="M:FFImageLoading.IImageService.InvalidateDiskCacheAsync">
            <summary>
            Invalidates the disk cache.
            </summary>
        </member>
        <member name="M:FFImageLoading.IImageService.InvalidateCacheEntryAsync(System.String,FFImageLoading.Cache.CacheType,System.Boolean)">
            <summary>
            Invalidates the cache for given key.
            </summary>
            <returns>The async.</returns>
            <param name="key">Concerns images with this key.</param>
            <param name="cacheType">Memory cache, Disk cache or both</param>
            <param name="removeSimilar">If similar keys should be removed, ie: typically keys with extra transformations</param>
        </member>
        <member name="M:FFImageLoading.IImageService.Cancel(System.Func{FFImageLoading.Work.IImageLoaderTask,System.Boolean})">
            <summary>
            Cancels tasks that match predicate.
            </summary>
            <param name="predicate">Predicate for finding relevant tasks to cancel.</param>
        </member>
        <member name="M:FFImageLoading.IImageService.Cancel(System.Func{FFImageLoading.Work.TaskParameter,System.Boolean})">
            <summary>
            Cancels tasks that match predicate.
            </summary>
            <param name="predicate">Predicate for finding relevant tasks to cancel.</param>
        </member>
        <member name="M:FFImageLoading.IImageService.DpToPixels(System.Double)">
            <summary>
            Dps to pixels.
            </summary>
            <returns>The to pixels.</returns>
            <param name="dp">Dp.</param>
        </member>
        <member name="M:FFImageLoading.IImageService.PixelsToDp(System.Double)">
            <summary>
            Pixelses to dp.
            </summary>
            <returns>The to dp.</returns>
            <param name="px">Px.</param>
        </member>
        <member name="T:FFImageLoading.Concurrency.IFixedSizePriorityQueue`2">
            <summary>
            A helper-interface only needed to make writing unit tests a bit easier (hence the 'internal' access modifier)
            </summary>
        </member>
        <member name="M:FFImageLoading.Concurrency.IFixedSizePriorityQueue`2.Resize(System.Int32)">
            <summary>
            Resize the queue so it can accept more nodes.  All currently enqueued nodes are remain.
            Attempting to decrease the queue size to a size too small to hold the existing nodes results in undefined behavior
            </summary>
        </member>
        <member name="P:FFImageLoading.Concurrency.IFixedSizePriorityQueue`2.MaxSize">
            <summary>
            Returns the maximum number of items that can be enqueued at once in this queue.  Once you hit this number (ie. once Count == MaxSize),
            attempting to enqueue another item will cause undefined behavior.
            </summary>
        </member>
        <member name="T:FFImageLoading.Concurrency.IPriorityQueue`2">
            <summary>
            The IPriorityQueue interface.  This is mainly here for purists, and in case I decide to add more implementations later.
            For speed purposes, it is actually recommended that you *don't* access the priority queue through this interface, since the JIT can
            (theoretically?) optimize method calls from concrete-types slightly better.
            </summary>
        </member>
        <member name="M:FFImageLoading.Concurrency.IPriorityQueue`2.Enqueue(`0,`1)">
            <summary>
            Enqueue a node to the priority queue.  Lower values are placed in front. Ties are broken by first-in-first-out.
            See implementation for how duplicates are handled.
            </summary>
        </member>
        <member name="M:FFImageLoading.Concurrency.IPriorityQueue`2.Dequeue">
            <summary>
            Removes the head of the queue (node with minimum priority; ties are broken by order of insertion), and returns it.
            </summary>
        </member>
        <member name="M:FFImageLoading.Concurrency.IPriorityQueue`2.Clear">
            <summary>
            Removes every node from the queue.
            </summary>
        </member>
        <member name="M:FFImageLoading.Concurrency.IPriorityQueue`2.Contains(`0)">
            <summary>
            Returns whether the given node is in the queue.
            </summary>
        </member>
        <member name="M:FFImageLoading.Concurrency.IPriorityQueue`2.Remove(`0)">
            <summary>
            Removes a node from the queue.  The node does not need to be the head of the queue.  
            </summary>
        </member>
        <member name="M:FFImageLoading.Concurrency.IPriorityQueue`2.UpdatePriority(`0,`1)">
            <summary>
            Call this method to change the priority of a node.  
            </summary>
        </member>
        <member name="P:FFImageLoading.Concurrency.IPriorityQueue`2.First">
            <summary>
            Returns the head of the queue, without removing it (use Dequeue() for that).
            </summary>
        </member>
        <member name="P:FFImageLoading.Concurrency.IPriorityQueue`2.Count">
            <summary>
            Returns the number of nodes in the queue.
            </summary>
        </member>
        <member name="T:FFImageLoading.Concurrency.SimplePriorityQueue`2">
            <summary>
            A simplified priority queue implementation.  Is stable, auto-resizes, and thread-safe, at the cost of being slightly slower than
            FastPriorityQueue
            Methods tagged as O(1) or O(log n) are assuming there are no duplicates.  Duplicates may increase the algorithmic complexity.
            </summary>
            <typeparam name="TItem">The type to enqueue</typeparam>
            <typeparam name="TPriority">The priority-type to use for nodes.  Must extend IComparable&lt;TPriority&gt;</typeparam>
        </member>
        <member name="M:FFImageLoading.Concurrency.SimplePriorityQueue`2.#ctor">
            <summary>
            Instantiate a new Priority Queue
            </summary>
        </member>
        <member name="M:FFImageLoading.Concurrency.SimplePriorityQueue`2.#ctor(System.Collections.Generic.IComparer{`1})">
            <summary>
            Instantiate a new Priority Queue
            </summary>
            <param name="comparer">The comparer used to compare TPriority values.  Defaults to Comparer&lt;TPriority&gt;.default</param>
        </member>
        <member name="M:FFImageLoading.Concurrency.SimplePriorityQueue`2.#ctor(System.Comparison{`1})">
            <summary>
            Instantiate a new Priority Queue
            </summary>
            <param name="comparer">The comparison function to use to compare TPriority values</param>
        </member>
        <member name="M:FFImageLoading.Concurrency.SimplePriorityQueue`2.GetExistingNode(`0)">
            <summary>
            Given an item of type T, returns the exist SimpleNode in the queue
            </summary>
        </member>
        <member name="M:FFImageLoading.Concurrency.SimplePriorityQueue`2.AddToNodeCache(FFImageLoading.Concurrency.SimplePriorityQueue{`0,`1}.SimpleNode)">
            <summary>
            Adds an item to the Node-cache to allow for many methods to be O(1) or O(log n)
            </summary>
        </member>
        <member name="M:FFImageLoading.Concurrency.SimplePriorityQueue`2.RemoveFromNodeCache(FFImageLoading.Concurrency.SimplePriorityQueue{`0,`1}.SimpleNode)">
            <summary>
            Removes an item to the Node-cache to allow for many methods to be O(1) or O(log n) (assuming no duplicates)
            </summary>
        </member>
        <member name="P:FFImageLoading.Concurrency.SimplePriorityQueue`2.Count">
            <summary>
            Returns the number of nodes in the queue.
            O(1)
            </summary>
        </member>
        <member name="P:FFImageLoading.Concurrency.SimplePriorityQueue`2.First">
            <summary>
            Returns the head of the queue, without removing it (use Dequeue() for that).
            Throws an exception when the queue is empty.
            O(1)
            </summary>
        </member>
        <member name="M:FFImageLoading.Concurrency.SimplePriorityQueue`2.Clear">
            <summary>
            Removes every node from the queue.
            O(n)
            </summary>
        </member>
        <member name="M:FFImageLoading.Concurrency.SimplePriorityQueue`2.Contains(`0)">
            <summary>
            Returns whether the given item is in the queue.
            O(1)
            </summary>
        </member>
        <member name="M:FFImageLoading.Concurrency.SimplePriorityQueue`2.Dequeue">
            <summary>
            Removes the head of the queue (node with minimum priority; ties are broken by order of insertion), and returns it.
            If queue is empty, throws an exception
            O(log n)
            </summary>
        </member>
        <member name="M:FFImageLoading.Concurrency.SimplePriorityQueue`2.EnqueueNoLockOrCache(`0,`1)">
            <summary>
            Enqueue the item with the given priority, without calling lock(_queue) or AddToNodeCache(node)
            </summary>
            <param name="item"></param>
            <param name="priority"></param>
            <returns></returns>
        </member>
        <member name="M:FFImageLoading.Concurrency.SimplePriorityQueue`2.Enqueue(`0,`1)">
            <summary>
            Enqueue a node to the priority queue.  Lower values are placed in front. Ties are broken by first-in-first-out.
            This queue automatically resizes itself, so there's no concern of the queue becoming 'full'.
            Duplicates and null-values are allowed.
            O(log n)
            </summary>
        </member>
        <member name="M:FFImageLoading.Concurrency.SimplePriorityQueue`2.EnqueueWithoutDuplicates(`0,`1)">
            <summary>
            Enqueue a node to the priority queue if it doesn't already exist.  Lower values are placed in front. Ties are broken by first-in-first-out.
            This queue automatically resizes itself, so there's no concern of the queue becoming 'full'.  Null values are allowed.
            Returns true if the node was successfully enqueued; false if it already exists.
            O(log n)
            </summary>
        </member>
        <member name="M:FFImageLoading.Concurrency.SimplePriorityQueue`2.Remove(`0)">
            <summary>
            Removes an item from the queue.  The item does not need to be the head of the queue.  
            If the item is not in the queue, an exception is thrown.  If unsure, check Contains() first.
            If multiple copies of the item are enqueued, only the first one is removed. 
            O(log n)
            </summary>
        </member>
        <member name="M:FFImageLoading.Concurrency.SimplePriorityQueue`2.UpdatePriority(`0,`1)">
            <summary>
            Call this method to change the priority of an item.
            Calling this method on a item not in the queue will throw an exception.
            If the item is enqueued multiple times, only the first one will be updated.
            (If your requirements are complex enough that you need to enqueue the same item multiple times <i>and</i> be able
            to update all of them, please wrap your items in a wrapper class so they can be distinguished).
            O(log n)
            </summary>
        </member>
        <member name="M:FFImageLoading.Concurrency.SimplePriorityQueue`2.GetPriority(`0)">
            <summary>
            Returns the priority of the given item.
            Calling this method on a item not in the queue will throw an exception.
            If the item is enqueued multiple times, only the priority of the first will be returned.
            (If your requirements are complex enough that you need to enqueue the same item multiple times <i>and</i> be able
            to query all their priorities, please wrap your items in a wrapper class so they can be distinguished).
            O(1)
            </summary>
        </member>
        <member name="M:FFImageLoading.Concurrency.SimplePriorityQueue`2.TryFirst(`0@)">
            Get the head of the queue, without removing it (use TryDequeue() for that).
            Useful for multi-threading, where the queue may become empty between calls to Contains() and First
            Returns true if successful, false otherwise
            O(1)
        </member>
        <member name="M:FFImageLoading.Concurrency.SimplePriorityQueue`2.TryDequeue(`0@)">
            <summary>
            Removes the head of the queue (node with minimum priority; ties are broken by order of insertion), and sets it to first.
            Useful for multi-threading, where the queue may become empty between calls to Contains() and Dequeue()
            Returns true if successful; false if queue was empty
            O(log n)
            </summary>
        </member>
        <member name="M:FFImageLoading.Concurrency.SimplePriorityQueue`2.TryRemove(`0)">
            <summary>
            Attempts to remove an item from the queue.  The item does not need to be the head of the queue.  
            Useful for multi-threading, where the queue may become empty between calls to Contains() and Remove()
            Returns true if the item was successfully removed, false if it wasn't in the queue.
            If multiple copies of the item are enqueued, only the first one is removed. 
            O(log n)
            </summary>
        </member>
        <member name="M:FFImageLoading.Concurrency.SimplePriorityQueue`2.TryUpdatePriority(`0,`1)">
            <summary>
            Call this method to change the priority of an item.
            Useful for multi-threading, where the queue may become empty between calls to Contains() and UpdatePriority()
            If the item is enqueued multiple times, only the first one will be updated.
            (If your requirements are complex enough that you need to enqueue the same item multiple times <i>and</i> be able
            to update all of them, please wrap your items in a wrapper class so they can be distinguished).
            Returns true if the item priority was updated, false otherwise.
            O(log n)
            </summary>
        </member>
        <member name="M:FFImageLoading.Concurrency.SimplePriorityQueue`2.TryGetPriority(`0,`1@)">
            <summary>
            Attempt to get the priority of the given item.
            Useful for multi-threading, where the queue may become empty between calls to Contains() and GetPriority()
            If the item is enqueued multiple times, only the priority of the first will be returned.
            (If your requirements are complex enough that you need to enqueue the same item multiple times <i>and</i> be able
            to query all their priorities, please wrap your items in a wrapper class so they can be distinguished).
            Returns true if the item was found in the queue, false otherwise
            O(1)
            </summary>
        </member>
        <member name="P:FFImageLoading.Concurrency.GenericPriorityQueueNode`1.Priority">
            <summary>
            The Priority to insert this node at.  Must be set BEFORE adding a node to the queue (ideally just once, in the node's constructor).
            Should not be manually edited once the node has been enqueued - use queue.UpdatePriority() instead
            </summary>
        </member>
        <member name="P:FFImageLoading.Concurrency.GenericPriorityQueueNode`1.QueueIndex">
            <summary>
            Represents the current position in the queue
            </summary>
        </member>
        <member name="P:FFImageLoading.Concurrency.GenericPriorityQueueNode`1.InsertionIndex">
            <summary>
            Represents the order the node was inserted in
            </summary>
        </member>
        <member name="T:FFImageLoading.Concurrency.GenericPriorityQueue`2">
            <summary>
            A copy of StablePriorityQueue which also has generic priority-type
            </summary>
            <typeparam name="TItem">The values in the queue.  Must extend the GenericPriorityQueue class</typeparam>
            <typeparam name="TPriority">The priority-type.  Must extend IComparable&lt;TPriority&gt;</typeparam>
        </member>
        <member name="M:FFImageLoading.Concurrency.GenericPriorityQueue`2.#ctor(System.Int32)">
            <summary>
            Instantiate a new Priority Queue
            </summary>
            <param name="maxNodes">The max nodes ever allowed to be enqueued (going over this will cause undefined behavior)</param>
        </member>
        <member name="M:FFImageLoading.Concurrency.GenericPriorityQueue`2.#ctor(System.Int32,System.Collections.Generic.IComparer{`1})">
            <summary>
            Instantiate a new Priority Queue
            </summary>
            <param name="maxNodes">The max nodes ever allowed to be enqueued (going over this will cause undefined behavior)</param>
            <param name="comparer">The comparer used to compare TPriority values.</param>
        </member>
        <member name="M:FFImageLoading.Concurrency.GenericPriorityQueue`2.#ctor(System.Int32,System.Comparison{`1})">
            <summary>
            Instantiate a new Priority Queue
            </summary>
            <param name="maxNodes">The max nodes ever allowed to be enqueued (going over this will cause undefined behavior)</param>
            <param name="comparer">The comparison function to use to compare TPriority values</param>
        </member>
        <member name="P:FFImageLoading.Concurrency.GenericPriorityQueue`2.Count">
            <summary>
            Returns the number of nodes in the queue.
            O(1)
            </summary>
        </member>
        <member name="P:FFImageLoading.Concurrency.GenericPriorityQueue`2.MaxSize">
            <summary>
            Returns the maximum number of items that can be enqueued at once in this queue.  Once you hit this number (ie. once Count == MaxSize),
            attempting to enqueue another item will cause undefined behavior.  O(1)
            </summary>
        </member>
        <member name="M:FFImageLoading.Concurrency.GenericPriorityQueue`2.Clear">
            <summary>
            Removes every node from the queue.
            O(n) (So, don't do this often!)
            </summary>
        </member>
        <member name="M:FFImageLoading.Concurrency.GenericPriorityQueue`2.Contains(`0)">
            <summary>
            Returns (in O(1)!) whether the given node is in the queue.  O(1)
            </summary>
        </member>
        <member name="M:FFImageLoading.Concurrency.GenericPriorityQueue`2.Enqueue(`0,`1)">
            <summary>
            Enqueue a node to the priority queue.  Lower values are placed in front. Ties are broken by first-in-first-out.
            If the queue is full, the result is undefined.
            If the node is already enqueued, the result is undefined.
            O(log n)
            </summary>
        </member>
        <member name="M:FFImageLoading.Concurrency.GenericPriorityQueue`2.HasHigherPriority(`0,`0)">
            <summary>
            Returns true if 'higher' has higher priority than 'lower', false otherwise.
            Note that calling HasHigherPriority(node, node) (ie. both arguments the same node) will return false
            </summary>
        </member>
        <member name="M:FFImageLoading.Concurrency.GenericPriorityQueue`2.Dequeue">
            <summary>
            Removes the head of the queue (node with minimum priority; ties are broken by order of insertion), and returns it.
            If queue is empty, result is undefined
            O(log n)
            </summary>
        </member>
        <member name="M:FFImageLoading.Concurrency.GenericPriorityQueue`2.Resize(System.Int32)">
            <summary>
            Resize the queue so it can accept more nodes.  All currently enqueued nodes are remain.
            Attempting to decrease the queue size to a size too small to hold the existing nodes results in undefined behavior
            O(n)
            </summary>
        </member>
        <member name="P:FFImageLoading.Concurrency.GenericPriorityQueue`2.First">
            <summary>
            Returns the head of the queue, without removing it (use Dequeue() for that).
            If the queue is empty, behavior is undefined.
            O(1)
            </summary>
        </member>
        <member name="M:FFImageLoading.Concurrency.GenericPriorityQueue`2.UpdatePriority(`0,`1)">
            <summary>
            This method must be called on a node every time its priority changes while it is in the queue.  
            <b>Forgetting to call this method will result in a corrupted queue!</b>
            Calling this method on a node not in the queue results in undefined behavior
            O(log n)
            </summary>
        </member>
        <member name="M:FFImageLoading.Concurrency.GenericPriorityQueue`2.Remove(`0)">
            <summary>
            Removes a node from the queue.  The node does not need to be the head of the queue.  
            If the node is not in the queue, the result is undefined.  If unsure, check Contains() first
            O(log n)
            </summary>
        </member>
        <member name="M:FFImageLoading.Concurrency.GenericPriorityQueue`2.IsValidQueue">
            <summary>
            <b>Should not be called in production code.</b>
            Checks to make sure the queue is still in a valid state.  Used for testing/debugging the queue.
            </summary>
        </member>
        <member name="T:FFImageLoading.Views.ICachedImageView">
            <summary>
            This interface is used to unify view properties / methods across all platform specific implementations
            </summary>
        </member>
    </members>
</doc>
