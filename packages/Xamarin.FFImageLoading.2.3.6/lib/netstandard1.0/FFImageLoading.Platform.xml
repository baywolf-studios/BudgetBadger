<?xml version="1.0"?>
<doc>
    <assembly>
        <name>FFImageLoading.Platform</name>
    </assembly>
    <members>
        <member name="T:FFImageLoading.ImageService">
            <summary>
            FFImageLoading by Daniel Luberda
            </summary>
        </member>
        <member name="P:FFImageLoading.ImageService.Instance">
            <summary>
            FFImageLoading instance.
            </summary>
            <value>The instance.</value>
        </member>
        <member name="P:FFImageLoading.ImageService.EnableMockImageService">
            <summary>
            Set this to use FFImageLoading in a unit test environment. 
            Instead throwing DoNotReference exception - use Mock implementation
            </summary>
        </member>
        <member name="T:FFImageLoading.TaskParameterExtensions">
            <summary>
            TaskParameterExtensions
            </summary>
        </member>
        <member name="M:FFImageLoading.TaskParameterExtensions.InvalidateAsync(FFImageLoading.Work.TaskParameter,FFImageLoading.Cache.CacheType)">
            <summary>
            Invalidate the image corresponding to given parameters from given caches.
            </summary>
            <param name="parameters">Image parameters.</param>
            <param name="cacheType">Cache type.</param>
        </member>
        <member name="M:FFImageLoading.TaskParameterExtensions.Preload(FFImageLoading.Work.TaskParameter)">
            <summary>
            Preloads the image request into memory cache/disk cache for future use.
            </summary>
            <param name="parameters">Image parameters.</param>
        </member>
        <member name="M:FFImageLoading.TaskParameterExtensions.PreloadAsync(FFImageLoading.Work.TaskParameter)">
            <summary>
            Preloads the image request into memory cache/disk cache for future use.
            IMPORTANT: It throws image loading exceptions - you should handle them
            </summary>
            <param name="parameters">Image parameters.</param>
        </member>
        <member name="M:FFImageLoading.TaskParameterExtensions.DownloadOnly(FFImageLoading.Work.TaskParameter)">
            <summary>
            Downloads the image request into disk cache for future use if not already exists.
            Only Url Source supported.
            </summary>
            <param name="parameters">Image parameters.</param>
        </member>
        <member name="M:FFImageLoading.TaskParameterExtensions.DownloadOnlyAsync(FFImageLoading.Work.TaskParameter)">
            <summary>
            Downloads the image request into disk cache for future use if not already exists.
            Only Url Source supported.
            IMPORTANT: It throws image loading exceptions - you should handle them
            </summary>
            <param name="parameters">Image parameters.</param>
        </member>
        <member name="T:FFImageLoading.TaskParameterPlatformExtensions">
            <summary>
            TaskParameterPlatformExtensions
            </summary>
        </member>
        <member name="M:FFImageLoading.TaskParameterPlatformExtensions.AsPNGStreamAsync(FFImageLoading.Work.TaskParameter)">
            <summary>
            Loads the image into PNG Stream
            </summary>
            <returns>The PNG Stream async.</returns>
            <param name="parameters">Parameters.</param>
        </member>
        <member name="M:FFImageLoading.TaskParameterPlatformExtensions.AsJPGStreamAsync(FFImageLoading.Work.TaskParameter,System.Int32)">
            <summary>
            Loads the image into JPG Stream
            </summary>
            <returns>The JPG Stream async.</returns>
            <param name="parameters">Parameters.</param>
            <param name="quality">Quality.</param>
        </member>
    </members>
</doc>
