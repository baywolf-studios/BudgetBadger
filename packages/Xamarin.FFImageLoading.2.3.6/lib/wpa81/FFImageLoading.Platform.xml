<?xml version="1.0"?>
<doc>
    <assembly>
        <name>FFImageLoading.Platform</name>
    </assembly>
    <members>
        <member name="T:FFImageLoading.Cache.FFSourceBindingCache">
            <summary>
            This class optimizes the call to "StorageFile.GetFileFromPathAsync" that is time consuming.
            The source of each image is the key of the cache... once a source has been checked the first time, any other control can be skipped
            </summary>
        </member>
        <member name="M:FFImageLoading.Cache.SimpleDiskCache.#ctor(System.String,FFImageLoading.Config.Configuration)">
            <summary>
            Initializes a new instance of the <see cref="T:FFImageLoading.Cache.SimpleDiskCache"/> class. This constructor attempts
            to create a folder of the given name under the <see cref="P:Windows.Storage.ApplicationData.TemporaryFolder"/>.
            </summary>
            <param name="cacheFolderName">The name of the cache folder.</param>
            <param name="configuration">The configuration object.</param>
        </member>
        <member name="M:FFImageLoading.Cache.SimpleDiskCache.#ctor(Windows.Storage.StorageFolder,System.String,FFImageLoading.Config.Configuration)">
            <summary>
            Initializes a new instance of the <see cref="T:FFImageLoading.Cache.SimpleDiskCache"/> class. This constructor attempts
            to create a folder of the given name under the given root <see cref="T:Windows.Storage.StorageFolder"/>.
            </summary>
            <param name="rootFolder">The root folder where the cache folder will be created.</param>
            <param name="cacheFolderName">The cache folder name.</param>
            <param name="configuration">The configuration object.</param>
        </member>
        <member name="M:FFImageLoading.Cache.SimpleDiskCache.CreateCache(System.String,FFImageLoading.Config.Configuration)">
            <summary>
            Creates new cache default instance.
            </summary>
            <returns>The cache.</returns>
            <param name="cacheName">Cache name.</param>
        </member>
        <member name="M:FFImageLoading.Cache.SimpleDiskCache.GetFilePathAsync(System.String)">
            <summary>
            GetFilePath
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:FFImageLoading.Cache.SimpleDiskCache.ExistsAsync(System.String)">
            <summary>
            Checks if cache entry exists/
            </summary>
            <returns>The async.</returns>
            <param name="key">Key.</param>
        </member>
        <member name="M:FFImageLoading.Cache.SimpleDiskCache.AddToSavingQueueIfNotExistsAsync(System.String,System.Byte[],System.TimeSpan,System.Action)">
            <summary>
            Adds the file to cache and file saving queue if not exists.
            </summary>
            <param name="key">Key.</param>
            <param name="bytes">Bytes.</param>
            <param name="duration">Duration.</param>
        </member>
        <member name="M:FFImageLoading.Cache.SimpleDiskCache.TryGetStreamAsync(System.String)">
            <summary>
            Tries to get cached file as stream.
            </summary>
            <returns>The get async.</returns>
            <param name="key">Key.</param>
        </member>
        <member name="M:FFImageLoading.Cache.SimpleDiskCache.RemoveAsync(System.String)">
            <summary>
            Removes the specified cache entry.
            </summary>
            <param name="key">Key.</param>
        </member>
        <member name="M:FFImageLoading.Cache.SimpleDiskCache.ClearAsync">
            <summary>
            Clears all cache entries.
            </summary>
        </member>
        <member name="M:FFImageLoading.Views.MvxCachedImageView.#ctor">
            <summary>
            MvxCachedImageView by Daniel Luberda
            </summary>
        </member>
        <member name="M:FFImageLoading.Views.MvxCachedImageView.SetupOnBeforeImageLoading(FFImageLoading.Work.TaskParameter)">
            <summary>
            Setups the on before image loading.
            You can add additional logic here to configure image loader settings before loading
            eg. custom cache keys, svg data resolvers, etc
            </summary>
            <param name="imageLoader">Image loader.</param>
        </member>
        <member name="F:FFImageLoading.FFImage.HorizontalImageAlignmentProperty">
            <summary>
            The horizontal alignment property of the underlying image.
            </summary>
        </member>
        <member name="F:FFImageLoading.FFImage.VerticalImageAlignmentProperty">
            <summary>
            The vertical alignment property of the underlying image.
            </summary>
        </member>
        <member name="F:FFImageLoading.FFImage.RetryCountProperty">
            <summary>
            The retry count property.
            </summary>
        </member>
        <member name="P:FFImageLoading.FFImage.RetryCount">
            <summary>
            If image loading fails automatically retry it a number of times, with a specific delay. Sets number of retries.
            </summary>
        </member>
        <member name="F:FFImageLoading.FFImage.RetryDelayProperty">
            <summary>
            The retry delay property.
            </summary>
        </member>
        <member name="P:FFImageLoading.FFImage.RetryDelay">
            <summary>
            If image loading fails automatically retry it a number of times, with a specific delay. Sets delay in milliseconds between each trial
            </summary>
        </member>
        <member name="F:FFImageLoading.FFImage.DownsampleWidthProperty">
            <summary>
            The downsample width property.
            </summary>
        </member>
        <member name="P:FFImageLoading.FFImage.DownsampleWidth">
            <summary>
            Reduce memory usage by downsampling the image. Aspect ratio will be kept even if width/height values are incorrect.
            Optional DownsampleWidth parameter, if value is higher than zero it will try to downsample to this width while keeping aspect ratio.
            </summary>
        </member>
        <member name="F:FFImageLoading.FFImage.DownsampleHeightProperty">
            <summary>
            The downsample height property.
            </summary>
        </member>
        <member name="P:FFImageLoading.FFImage.DownsampleHeight">
            <summary>
            Reduce memory usage by downsampling the image. Aspect ratio will be kept even if width/height values are incorrect.
            Optional DownsampleHeight parameter, if value is higher than zero it will try to downsample to this height while keeping aspect ratio.
            </summary>
        </member>
        <member name="P:FFImageLoading.FFImage.DownsampleToViewSize">
            <summary>
            Reduce memory usage by downsampling the image. Aspect ratio will be kept even if width/height values are incorrect.
            DownsampleWidth and DownsampleHeight properties will be automatically set to view size
            If the view height or width will not return > 0 - it'll fall back
            to using DownsampleWidth / DownsampleHeight properties values
            </summary>
            <value><c>true</c> if downsample to view size; otherwise, <c>false</c>.</value>
        </member>
        <!-- Badly formed XML comment ignored for member "F:FFImageLoading.FFImage.DownsampleModeProperty" -->
        <member name="P:FFImageLoading.FFImage.DownsampleMode">
            <summary>
            Set interpolation (resizing) algorithm.
            </summary>
            <value>InterpolationMode enumeration. Bilinear by default.</value>
        </member>
        <member name="P:FFImageLoading.FFImage.DownsampleUseDipUnits">
            <summary>
            If set to <c>true</c> DownsampleWidth and DownsampleHeight properties
            will use density independent pixels for downsampling
            </summary>
            <value><c>true</c> if downsample use dip units; otherwise, <c>false</c>.</value>
        </member>
        <member name="F:FFImageLoading.FFImage.CacheDurationProperty">
            <summary>
            The cache duration property.
            </summary>
        </member>
        <member name="P:FFImageLoading.FFImage.CacheDuration">
            <summary>
            How long the file will be cached on disk.
            </summary>
        </member>
        <member name="F:FFImageLoading.FFImage.LoadingPriorityProperty">
            <summary>
            The Loading Priority property.
            </summary>
        </member>
        <member name="P:FFImageLoading.FFImage.LoadingPriority">
            <summary>
            Defines the loading priority, the default is LoadingPriority.Normal
            </summary>
        </member>
        <member name="F:FFImageLoading.FFImage.CacheTypeProperty">
            <summary>
            The cache type property.
            </summary>
        </member>
        <member name="P:FFImageLoading.FFImage.CacheType">
            <summary>
            Set the cache storage type, (Memory, Disk, All). by default cache is set to All.
            </summary>
        </member>
        <member name="F:FFImageLoading.FFImage.FadeAnimationEnabledProperty">
            <summary>
            The fade animation enabled property.
            </summary>
        </member>
        <member name="P:FFImageLoading.FFImage.FadeAnimationEnabled">
            <summary>
            Indicates if the fade animation effect should be enabled. By default this value comes from ImageService.Instance.Config.FadeAnimationEnabled.
            </summary>
        </member>
        <member name="F:FFImageLoading.FFImage.TransformPlaceholdersProperty">
             <summary>
             The transform placeholders property.
             </summary>
            
        </member>
        <member name="P:FFImageLoading.FFImage.TransformPlaceholders">
            <summary>
            Indicates if transforms should be applied to placeholders.  By default this value comes from ImageService.Instance.Config.TransformPlaceholders.
            </summary>
        </member>
        <member name="F:FFImageLoading.FFImage.LoadingPlaceholderProperty">
            <summary>
            The loading placeholder property.
            </summary>
        </member>
        <member name="P:FFImageLoading.FFImage.LoadingPlaceholder">
            <summary>
            Gets or sets the loading placeholder image.
            </summary>
        </member>
        <member name="F:FFImageLoading.FFImage.ErrorPlaceholderProperty">
            <summary>
            The error placeholder property.
            </summary>
        </member>
        <member name="P:FFImageLoading.FFImage.ErrorPlaceholder">
            <summary>
            Gets or sets the error placeholder image.
            </summary>
        </member>
        <member name="F:FFImageLoading.FFImage.TransformationsProperty">
            <summary>
            The transformations property.
            </summary>
        </member>
        <member name="P:FFImageLoading.FFImage.Transformations">
            <summary>
            Gets or sets the transformations.
            </summary>
            <value>The transformations.</value>
        </member>
        <member name="M:FFImageLoading.FFImage.Cancel">
            <summary>
            Cancels image loading tasks
            </summary>
        </member>
        <member name="M:FFImageLoading.FFImage.GetImageAsJpgAsync(System.Int32,System.Int32,System.Int32)">
            <summary>
            Gets the image as JPG.
            </summary>
            <returns>The image as JPG.</returns>
        </member>
        <member name="M:FFImageLoading.FFImage.GetImageAsPngAsync(System.Int32,System.Int32)">
            <summary>
            Gets the image as PNG
            </summary>
            <returns>The image as PNG.</returns>
        </member>
        <member name="P:FFImageLoading.FFImage.CacheKeyFactory">
            <summary>
            Gets or sets the cache custom key factory.
            </summary>
            <value>The cache key factory.</value>
        </member>
        <member name="M:FFImageLoading.FFImage.SetPauseWork(System.Boolean)">
            <summary>
            Pauses image loading (enable or disable).
            </summary>
            <param name="pauseWork">If set to <c>true</c> pauses image loading.</param>
        </member>
        <member name="M:FFImageLoading.FFImage.ClearCacheAsync(FFImageLoading.Cache.CacheType)">
            <summary>
            Clears image cache
            </summary>
            <param name="cacheType">Cache type to invalidate</param>
        </member>
        <member name="M:FFImageLoading.FFImage.InvalidateCacheEntryAsync(System.String,FFImageLoading.Cache.CacheType)">
            <summary>
            Invalidates cache for a specified key
            </summary>
            <param name="key">Key to invalidate</param>
            <param name="cacheType">Cache type to invalidate</param>
        </member>
        <member name="E:FFImageLoading.FFImage.Success">
            <summary>
            Occurs after image loading success.
            </summary>
        </member>
        <member name="F:FFImageLoading.FFImage.SuccessCommandProperty">
            <summary>
            The SuccessCommandProperty.
            </summary>
        </member>
        <member name="P:FFImageLoading.FFImage.SuccessCommand">
            <summary>
            Gets or sets the SuccessCommand.
            Occurs after image loading success.
            Command parameter: CachedImageEvents.SuccessEventArgs
            </summary>
            <value>The success command.</value>
        </member>
        <member name="E:FFImageLoading.FFImage.Error">
            <summary>
            Occurs after image loading error.
            </summary>
        </member>
        <member name="F:FFImageLoading.FFImage.ErrorCommandProperty">
            <summary>
            The ErrorCommandProperty.
            </summary>
        </member>
        <member name="P:FFImageLoading.FFImage.ErrorCommand">
            <summary>
            Gets or sets the ErrorCommand.
            Occurs after image loading error.
            Command parameter: CachedImageEvents.ErrorEventArgs
            </summary>
            <value>The error command.</value>
        </member>
        <member name="E:FFImageLoading.FFImage.Finish">
            <summary>
            Occurs after every image loading.
            </summary>
        </member>
        <member name="F:FFImageLoading.FFImage.FinishCommandProperty">
            <summary>
            The FinishCommandProperty.
            </summary>
        </member>
        <member name="P:FFImageLoading.FFImage.FinishCommand">
            <summary>
            Gets or sets the FinishCommand.
            Occurs after every image loading.
            Command parameter: CachedImageEvents.FinishEventArgs
            </summary>
            <value>The finish command.</value>
        </member>
        <member name="T:FFImageLoading.ImageService">
            <summary>
            FFImageLoading by Daniel Luberda
            </summary>
        </member>
        <member name="P:FFImageLoading.ImageService.Instance">
            <summary>
            FFImageLoading instance.
            </summary>
            <value>The instance.</value>
        </member>
        <member name="T:FFImageLoading.TaskParameterExtensions">
            <summary>
            TaskParameterExtensions
            </summary>
        </member>
        <member name="M:FFImageLoading.TaskParameterExtensions.InvalidateAsync(FFImageLoading.Work.TaskParameter,FFImageLoading.Cache.CacheType)">
            <summary>
            Invalidate the image corresponding to given parameters from given caches.
            </summary>
            <param name="parameters">Image parameters.</param>
            <param name="cacheType">Cache type.</param>
        </member>
        <member name="M:FFImageLoading.TaskParameterExtensions.Preload(FFImageLoading.Work.TaskParameter)">
            <summary>
            Preloads the image request into memory cache/disk cache for future use.
            </summary>
            <param name="parameters">Image parameters.</param>
        </member>
        <member name="M:FFImageLoading.TaskParameterExtensions.PreloadAsync(FFImageLoading.Work.TaskParameter)">
            <summary>
            Preloads the image request into memory cache/disk cache for future use.
            IMPORTANT: It throws image loading exceptions - you should handle them
            </summary>
            <param name="parameters">Image parameters.</param>
        </member>
        <member name="M:FFImageLoading.TaskParameterExtensions.DownloadOnly(FFImageLoading.Work.TaskParameter)">
            <summary>
            Downloads the image request into disk cache for future use if not already exists.
            Only Url Source supported.
            </summary>
            <param name="parameters">Image parameters.</param>
        </member>
        <member name="M:FFImageLoading.TaskParameterExtensions.DownloadOnlyAsync(FFImageLoading.Work.TaskParameter)">
            <summary>
            Downloads the image request into disk cache for future use if not already exists.
            Only Url Source supported.
            IMPORTANT: It throws image loading exceptions - you should handle them
            </summary>
            <param name="parameters">Image parameters.</param>
        </member>
        <member name="T:FFImageLoading.TaskParameterPlatformExtensions">
            <summary>
            TaskParameterPlatformExtensions
            </summary>
        </member>
        <member name="M:FFImageLoading.TaskParameterPlatformExtensions.AsPNGStreamAsync(FFImageLoading.Work.TaskParameter)">
            <summary>
            Loads the image into PNG Stream
            </summary>
            <returns>The PNG Stream async.</returns>
            <param name="parameters">Parameters.</param>
        </member>
        <member name="M:FFImageLoading.TaskParameterPlatformExtensions.AsJPGStreamAsync(FFImageLoading.Work.TaskParameter,System.Int32)">
            <summary>
            Loads the image into JPG Stream
            </summary>
            <returns>The JPG Stream async.</returns>
            <param name="parameters">Parameters.</param>
        </member>
        <member name="M:FFImageLoading.TaskParameterPlatformExtensions.Into(FFImageLoading.Work.TaskParameter,Windows.UI.Xaml.Controls.Image)">
            <summary>
            Loads the image into given Image using defined parameters.
            </summary>
            <param name="parameters">Parameters for loading the image.</param>
            <param name="imageView">Image view that should receive the image.</param>
        </member>
        <member name="M:FFImageLoading.TaskParameterPlatformExtensions.IntoAsync(FFImageLoading.Work.TaskParameter,Windows.UI.Xaml.Controls.Image)">
            <summary>
            Loads the image into given Image using defined parameters.
            IMPORTANT: It throws image loading exceptions - you should handle them
            </summary>
            <returns>An awaitable Task.</returns>
            <param name="parameters">Parameters for loading the image.</param>
            <param name="imageView">Image view that should receive the image.</param>
        </member>
        <member name="M:FFImageLoading.TaskParameterPlatformExtensions.AsWriteableBitmapAsync(FFImageLoading.Work.TaskParameter)">
            <summary>
            Loads and gets WriteableBitmap using defined parameters.
            IMPORTANT: It throws image loading exceptions - you should handle them
            </summary>
            <returns>The WriteableBitmap.</returns>
            <param name="parameters">Parameters.</param>
        </member>
    </members>
</doc>
